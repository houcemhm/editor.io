{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericCharsStr, alphaNumericAndMarksCharsStr, getDomainNameStr } from \"../regex-lib\";\nimport { tldRegex } from \"./tld-regex\";\nimport { UrlMatch } from \"../match/url-match\";\nimport { UrlMatchValidator } from \"./url-match-validator\";\n// RegExp objects which are shared by all instances of UrlMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating UrlMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nvar matcherRegex = function () {\n  var schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,\n    // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n    wwwRegex = /(?:www\\.)/,\n    // starting with 'www.'\n    // Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n    // http://blog.codinghorror.com/the-problem-with-urls/\n    urlSuffixRegex = new RegExp('[/?#](?:[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}?!:,.;^\\u2713]*[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}\\u2713])?');\n  return new RegExp(['(?:', '(', schemeRegex.source, getDomainNameStr(2), ')', '|', '(', '(//)?', wwwRegex.source, getDomainNameStr(6), ')', '|', '(', '(//)?', getDomainNameStr(10) + '\\\\.', tldRegex.source, '(?![-' + alphaNumericCharsStr + '])', ')', ')', '(?::[0-9]+)?', '(?:' + urlSuffixRegex.source + ')?' // match for path, query string, and/or hash anchor - optional\n  ].join(\"\"), 'gi');\n}();\nvar wordCharRegExp = new RegExp('[' + alphaNumericAndMarksCharsStr + ']');\n/**\r\n * @class Autolinker.matcher.Url\r\n * @extends Autolinker.matcher.Matcher\r\n *\r\n * Matcher to find URL matches in an input string.\r\n *\r\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\r\n */\nvar UrlMatcher = /** @class */function (_super) {\n  tslib_1.__extends(UrlMatcher, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match instance,\r\n   *   specified in an Object (map).\r\n   */\n  function UrlMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @cfg {Object} stripPrefix (required)\r\n     *\r\n     * The Object form of {@link Autolinker#cfg-stripPrefix}.\r\n     */\n    _this.stripPrefix = {\n      scheme: true,\n      www: true\n    }; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @cfg {Boolean} stripTrailingSlash (required)\r\n     * @inheritdoc Autolinker#stripTrailingSlash\r\n     */\n    _this.stripTrailingSlash = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @cfg {Boolean} decodePercentEncoding (required)\r\n     * @inheritdoc Autolinker#decodePercentEncoding\r\n     */\n    _this.decodePercentEncoding = true; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @protected\r\n     * @property {RegExp} matcherRegex\r\n     *\r\n     * The regular expression to match URLs with an optional scheme, port\r\n     * number, path, query string, and hash anchor.\r\n     *\r\n     * Example matches:\r\n     *\r\n     *     http://google.com\r\n     *     www.google.com\r\n     *     google.com/path/to/file?q1=1&q2=2#myAnchor\r\n     *\r\n     *\r\n     * This regular expression will have the following capturing groups:\r\n     *\r\n     * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\r\n     *     This is used to match scheme URLs with just a single word, such as\r\n     *     'http://localhost', where we won't double check that the domain name\r\n     *     has at least one dot ('.') in it.\r\n     * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\r\n     *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\r\n     *     'http://', 'ftp:', etc.)\r\n     * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\r\n     *     URL. Will be an empty string if it is not a protocol-relative match.\r\n     *     We need to know the character before the '//' in order to determine\r\n     *     if it is a valid match or the // was in a string we don't want to\r\n     *     auto-link.\r\n     * 4.  Group that matches a known TLD (top level domain), when a scheme\r\n     *     or 'www.'-prefixed domain is not matched.\r\n     * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\r\n     *     URL. Will be an empty string if it is not a protocol-relative match.\r\n     *     See #3 for more info.\r\n     */\n    _this.matcherRegex = matcherRegex;\n    /**\r\n     * A regular expression to use to check the character before a protocol-relative\r\n     * URL match. We don't want to match a protocol-relative URL if it is part\r\n     * of another word.\r\n     *\r\n     * For example, we want to match something like \"Go to: //google.com\",\r\n     * but we don't want to match something like \"abc//google.com\"\r\n     *\r\n     * This regular expression is used to test the character before the '//'.\r\n     *\r\n     * @protected\r\n     * @type {RegExp} wordCharRegExp\r\n     */\n    _this.wordCharRegExp = wordCharRegExp;\n    _this.stripPrefix = cfg.stripPrefix;\n    _this.stripTrailingSlash = cfg.stripTrailingSlash;\n    _this.decodePercentEncoding = cfg.decodePercentEncoding;\n    return _this;\n  }\n  /**\r\n   * @inheritdoc\r\n   */\n  UrlMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n      stripPrefix = this.stripPrefix,\n      stripTrailingSlash = this.stripTrailingSlash,\n      decodePercentEncoding = this.decodePercentEncoding,\n      tagBuilder = this.tagBuilder,\n      matches = [],\n      match;\n    var _loop_1 = function () {\n      var matchStr = match[0],\n        schemeUrlMatch = match[1],\n        wwwUrlMatch = match[4],\n        wwwProtocolRelativeMatch = match[5],\n        //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n        tldProtocolRelativeMatch = match[9],\n        offset = match.index,\n        protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n        prevChar = text.charAt(offset - 1);\n      if (!UrlMatchValidator.isValid(matchStr, schemeUrlMatch)) {\n        return \"continue\";\n      }\n      // If the match is preceded by an '@' character, then it is either\n      // an email address or a username. Skip these types of matches.\n      if (offset > 0 && prevChar === '@') {\n        return \"continue\";\n      }\n      // If it's a protocol-relative '//' match, but the character before the '//'\n      // was a word character (i.e. a letter/number), then we found the '//' in the\n      // middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n      // match.\n      if (offset > 0 && protocolRelativeMatch && this_1.wordCharRegExp.test(prevChar)) {\n        return \"continue\";\n      }\n      // If the URL ends with a question mark, don't include the question\n      // mark as part of the URL. We'll assume the question mark was the\n      // end of a sentence, such as: \"Going to google.com?\"\n      if (/\\?$/.test(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1);\n      }\n      // Handle a closing parenthesis or square bracket at the end of the \n      // match, and exclude it if there is not a matching open parenthesis \n      // or square bracket in the match itself.\n      if (this_1.matchHasUnbalancedClosingParen(matchStr)) {\n        matchStr = matchStr.substr(0, matchStr.length - 1); // remove the trailing \")\"\n      } else {\n        // Handle an invalid character after the TLD\n        var pos = this_1.matchHasInvalidCharAfterTld(matchStr, schemeUrlMatch);\n        if (pos > -1) {\n          matchStr = matchStr.substr(0, pos); // remove the trailing invalid chars\n        }\n      }\n      // The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n      // However, in cases where a URL is missing whitespace before an obvious link,\n      // (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n      // at the http:// part. We will check if the match contains a common scheme and then \n      // shift the match to start from there. \t\t\n      var foundCommonScheme = ['http://', 'https://'].find(function (commonScheme) {\n        return !!schemeUrlMatch && schemeUrlMatch.indexOf(commonScheme) !== -1;\n      });\n      if (foundCommonScheme) {\n        // If we found an overmatched URL, we want to find the index\n        // of where the match should start and shift the match to\n        // start from the beginning of the common scheme\n        var indexOfSchemeStart = matchStr.indexOf(foundCommonScheme);\n        matchStr = matchStr.substr(indexOfSchemeStart);\n        schemeUrlMatch = schemeUrlMatch.substr(indexOfSchemeStart);\n        offset = offset + indexOfSchemeStart;\n      }\n      var urlMatchType = schemeUrlMatch ? 'scheme' : wwwUrlMatch ? 'www' : 'tld',\n        protocolUrlMatch = !!schemeUrlMatch;\n      matches.push(new UrlMatch({\n        tagBuilder: tagBuilder,\n        matchedText: matchStr,\n        offset: offset,\n        urlMatchType: urlMatchType,\n        url: matchStr,\n        protocolUrlMatch: protocolUrlMatch,\n        protocolRelativeMatch: !!protocolRelativeMatch,\n        stripPrefix: stripPrefix,\n        stripTrailingSlash: stripTrailingSlash,\n        decodePercentEncoding: decodePercentEncoding\n      }));\n    };\n    var this_1 = this;\n    while ((match = matcherRegex.exec(text)) !== null) {\n      _loop_1();\n    }\n    return matches;\n  };\n  /**\r\n   * Determines if a match found has an unmatched closing parenthesis,\r\n   * square bracket or curly bracket. If so, the symbol will be removed\r\n   * from the match itself, and appended after the generated anchor tag.\r\n   *\r\n   * A match may have an extra closing parenthesis at the end of the match\r\n   * because the regular expression must include parenthesis for URLs such as\r\n   * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\r\n   *\r\n   * However, an extra parenthesis *will* be included when the URL itself is\r\n   * wrapped in parenthesis, such as in the case of:\r\n   *     \"(wikipedia.com/something_(disambiguation))\"\r\n   * In this case, the last closing parenthesis should *not* be part of the\r\n   * URL itself, and this method will return `true`.\r\n   *\r\n   * For square brackets in URLs such as in PHP arrays, the same behavior as\r\n   * parenthesis discussed above should happen:\r\n   *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\r\n   * The closing square bracket should not be part of the URL itself, and this\r\n   * method will return `true`.\r\n   *\r\n   * @protected\r\n   * @param {String} matchStr The full match string from the {@link #matcherRegex}.\r\n   * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\r\n   *   square bracket at the end of the `matchStr`, `false` otherwise.\r\n   */\n  UrlMatcher.prototype.matchHasUnbalancedClosingParen = function (matchStr) {\n    var endChar = matchStr.charAt(matchStr.length - 1);\n    var startChar;\n    if (endChar === ')') {\n      startChar = '(';\n    } else if (endChar === ']') {\n      startChar = '[';\n    } else if (endChar === '}') {\n      startChar = '{';\n    } else {\n      return false; // not a close parenthesis or square bracket\n    }\n    // Find if there are the same number of open braces as close braces in\n    // the URL string, minus the last character (which we have already \n    // determined to be either ')', ']' or '}'\n    var numOpenBraces = 0;\n    for (var i = 0, len = matchStr.length - 1; i < len; i++) {\n      var char = matchStr.charAt(i);\n      if (char === startChar) {\n        numOpenBraces++;\n      } else if (char === endChar) {\n        numOpenBraces = Math.max(numOpenBraces - 1, 0);\n      }\n    }\n    // If the number of open braces matches the number of close braces in\n    // the URL minus the last character, then the match has *unbalanced*\n    // braces because of the last character. Example of unbalanced braces\n    // from the regex match:\n    //     \"http://example.com?a[]=1]\"\n    if (numOpenBraces === 0) {\n      return true;\n    }\n    return false;\n  };\n  /**\r\n   * Determine if there's an invalid character after the TLD in a URL. Valid\r\n   * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\r\n   * check.\r\n   *\r\n   * @protected\r\n   * @param {String} urlMatch The matched URL, if there was one. Will be an\r\n   *   empty string if the match is not a URL match.\r\n   * @param {String} schemeUrlMatch The match URL string for a scheme\r\n   *   match. Ex: 'http://yahoo.com'. This is used to match something like\r\n   *   'http://localhost', where we won't double check that the domain name\r\n   *   has at least one '.' in it.\r\n   * @return {Number} the position where the invalid character was found. If\r\n   *   no such character was found, returns -1\r\n   */\n  UrlMatcher.prototype.matchHasInvalidCharAfterTld = function (urlMatch, schemeUrlMatch) {\n    if (!urlMatch) {\n      return -1;\n    }\n    var offset = 0;\n    if (schemeUrlMatch) {\n      offset = urlMatch.indexOf(':');\n      urlMatch = urlMatch.slice(offset);\n    }\n    var re = new RegExp(\"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\");\n    var res = re.exec(urlMatch);\n    if (res === null) {\n      return -1;\n    }\n    offset += res[1].length;\n    urlMatch = urlMatch.slice(res[1].length);\n    if (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n      return offset;\n    }\n    return -1;\n  };\n  return UrlMatcher;\n}(Matcher);\nexport { UrlMatcher };","map":{"version":3,"mappings":"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","names":["Matcher","alphaNumericCharsStr","alphaNumericAndMarksCharsStr","getDomainNameStr","tldRegex","UrlMatch","UrlMatchValidator","matcherRegex","schemeRegex","wwwRegex","urlSuffixRegex","RegExp","source","join","wordCharRegExp","tslib_1","cfg","_super","_this","scheme","www","stripPrefix","stripTrailingSlash","decodePercentEncoding","UrlMatcher","text","tagBuilder","matches","match","matchStr","schemeUrlMatch","wwwUrlMatch","wwwProtocolRelativeMatch","tldProtocolRelativeMatch","offset","index","protocolRelativeMatch","prevChar","charAt","isValid","this_1","test","substr","length","matchHasUnbalancedClosingParen","pos","matchHasInvalidCharAfterTld","foundCommonScheme","find","commonScheme","indexOf","indexOfSchemeStart","urlMatchType","protocolUrlMatch","push","matchedText","url","exec","endChar","startChar","numOpenBraces","i","len","char","Math","max","urlMatch","slice","re","res"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\matcher\\url-matcher.ts"],"sourcesContent":["import { Matcher, MatcherConfig } from \"./matcher\";\nimport { alphaNumericCharsStr, alphaNumericAndMarksCharsStr, getDomainNameStr } from \"../regex-lib\";\nimport { StripPrefixConfigObj, UrlMatchTypeOptions } from \"../autolinker\";\nimport { tldRegex } from \"./tld-regex\";\nimport { UrlMatch } from \"../match/url-match\";\nimport { UrlMatchValidator } from \"./url-match-validator\";\nimport { Match } from \"../match/match\";\n\n// RegExp objects which are shared by all instances of UrlMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating UrlMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nconst matcherRegex = (function() {\n\tlet schemeRegex = /(?:[A-Za-z][-.+A-Za-z0-9]{0,63}:(?![A-Za-z][-.+A-Za-z0-9]{0,63}:\\/\\/)(?!\\d+\\/?)(?:\\/\\/)?)/,  // match protocol, allow in format \"http://\" or \"mailto:\". However, do not match the first part of something like 'link:http://www.google.com' (i.e. don't match \"link:\"). Also, make sure we don't interpret 'google.com:8000' as if 'google.com' was a protocol here (i.e. ignore a trailing port number in this regex)\n\t\twwwRegex = /(?:www\\.)/,  // starting with 'www.'\n\n\t\t// Allow optional path, query string, and hash anchor, not ending in the following characters: \"?!:,.;\"\n\t\t// http://blog.codinghorror.com/the-problem-with-urls/\n\t\turlSuffixRegex = new RegExp( '[/?#](?:[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}?!:,.;^\\u2713]*[' + alphaNumericAndMarksCharsStr + '\\\\-+&@#/%=~_()|\\'$*\\\\[\\\\]{}\\u2713])?' );\n\n\treturn new RegExp( [\n\t\t'(?:', // parens to cover match for scheme (optional), and domain\n\t\t\t'(',  // *** Capturing group $1, for a scheme-prefixed url (ex: http://google.com)\n\t\t\t\tschemeRegex.source,\n\t\t\t\tgetDomainNameStr( 2 ),\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t'(',  // *** Capturing group $4 for a 'www.' prefixed url (ex: www.google.com)\n\t\t\t\t'(//)?',  // *** Capturing group $5 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character (handled later)\n\t\t\t\twwwRegex.source,\n\t\t\t\tgetDomainNameStr(6),\n\t\t\t')',\n\n\t\t\t'|',\n\n\t\t\t'(',  // *** Capturing group $8, for known a TLD url (ex: google.com)\n\t\t\t\t'(//)?',  // *** Capturing group $9 for an optional protocol-relative URL. Must be at the beginning of the string or start with a non-word character (handled later)\n\t\t\t\tgetDomainNameStr(10) + '\\\\.',\n\t\t\t\ttldRegex.source,\n\t\t\t\t'(?![-' + alphaNumericCharsStr + '])', // TLD not followed by a letter, behaves like unicode-aware \\b\n\t\t\t')',\n\t\t')',\n\n\t\t'(?::[0-9]+)?', // port\n\n\t\t'(?:' + urlSuffixRegex.source + ')?'  // match for path, query string, and/or hash anchor - optional\n\t].join( \"\" ), 'gi' );\n} )();\n\nconst wordCharRegExp = new RegExp( '[' + alphaNumericAndMarksCharsStr + ']' );\n\n/**\n * @class Autolinker.matcher.Url\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find URL matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more details.\n */\nexport class UrlMatcher extends Matcher {\n\n\t/**\n\t * @cfg {Object} stripPrefix (required)\n\t *\n\t * The Object form of {@link Autolinker#cfg-stripPrefix}.\n\t */\n\tprotected stripPrefix: Required<StripPrefixConfigObj> = { scheme: true, www: true };  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} stripTrailingSlash (required)\n\t * @inheritdoc Autolinker#stripTrailingSlash\n\t */\n\tprotected stripTrailingSlash: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Boolean} decodePercentEncoding (required)\n\t * @inheritdoc Autolinker#decodePercentEncoding\n\t */\n\tprotected decodePercentEncoding: boolean = true;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t *\n\t * The regular expression to match URLs with an optional scheme, port\n\t * number, path, query string, and hash anchor.\n\t *\n\t * Example matches:\n\t *\n\t *     http://google.com\n\t *     www.google.com\n\t *     google.com/path/to/file?q1=1&q2=2#myAnchor\n\t *\n\t *\n\t * This regular expression will have the following capturing groups:\n\t *\n\t * 1.  Group that matches a scheme-prefixed URL (i.e. 'http://google.com').\n\t *     This is used to match scheme URLs with just a single word, such as\n\t *     'http://localhost', where we won't double check that the domain name\n\t *     has at least one dot ('.') in it.\n\t * 2.  Group that matches a 'www.' prefixed URL. This is only matched if the\n\t *     'www.' text was not prefixed by a scheme (i.e.: not prefixed by\n\t *     'http://', 'ftp:', etc.)\n\t * 3.  A protocol-relative ('//') match for the case of a 'www.' prefixed\n\t *     URL. Will be an empty string if it is not a protocol-relative match.\n\t *     We need to know the character before the '//' in order to determine\n\t *     if it is a valid match or the // was in a string we don't want to\n\t *     auto-link.\n\t * 4.  Group that matches a known TLD (top level domain), when a scheme\n\t *     or 'www.'-prefixed domain is not matched.\n\t * 5.  A protocol-relative ('//') match for the case of a known TLD prefixed\n\t *     URL. Will be an empty string if it is not a protocol-relative match.\n\t *     See #3 for more info.\n\t */\n\tprotected matcherRegex = matcherRegex;\n\n\t/**\n\t * A regular expression to use to check the character before a protocol-relative\n\t * URL match. We don't want to match a protocol-relative URL if it is part\n\t * of another word.\n\t *\n\t * For example, we want to match something like \"Go to: //google.com\",\n\t * but we don't want to match something like \"abc//google.com\"\n\t *\n\t * This regular expression is used to test the character before the '//'.\n\t *\n\t * @protected\n\t * @type {RegExp} wordCharRegExp\n\t */\n\tprotected wordCharRegExp = wordCharRegExp;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: UrlMatcherConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.stripPrefix = cfg.stripPrefix;\n\t\tthis.stripTrailingSlash = cfg.stripTrailingSlash;\n\t\tthis.decodePercentEncoding = cfg.decodePercentEncoding;\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t    stripPrefix = this.stripPrefix,\n\t\t    stripTrailingSlash = this.stripTrailingSlash,\n\t\t    decodePercentEncoding = this.decodePercentEncoding,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet matchStr = match[ 0 ],\n\t\t\t    schemeUrlMatch = match[ 1 ],\n\t\t\t    wwwUrlMatch = match[ 4 ],\n\t\t\t    wwwProtocolRelativeMatch = match[ 5 ],\n\t\t\t    //tldUrlMatch = match[ 8 ],  -- not needed at the moment\n\t\t\t    tldProtocolRelativeMatch = match[ 9 ],\n\t\t\t    offset = match.index,\n\t\t\t    protocolRelativeMatch = wwwProtocolRelativeMatch || tldProtocolRelativeMatch,\n\t\t\t\tprevChar = text.charAt( offset - 1 );\n\n\t\t\tif( !UrlMatchValidator.isValid( matchStr, schemeUrlMatch ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the match is preceded by an '@' character, then it is either\n\t\t\t// an email address or a username. Skip these types of matches.\n\t\t\tif( offset > 0 && prevChar === '@' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If it's a protocol-relative '//' match, but the character before the '//'\n\t\t\t// was a word character (i.e. a letter/number), then we found the '//' in the\n\t\t\t// middle of another word (such as \"asdf//asdf.com\"). In this case, skip the\n\t\t\t// match.\n\t\t\tif( offset > 0 && protocolRelativeMatch && this.wordCharRegExp.test( prevChar ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If the URL ends with a question mark, don't include the question\n\t\t\t// mark as part of the URL. We'll assume the question mark was the\n\t\t\t// end of a sentence, such as: \"Going to google.com?\"\n\t\t\tif( /\\?$/.test( matchStr ) ) {\n\t\t\t\tmatchStr = matchStr.substr( 0, matchStr.length-1 );\n\t\t\t}\n\n\t\t\t// Handle a closing parenthesis or square bracket at the end of the \n\t\t\t// match, and exclude it if there is not a matching open parenthesis \n\t\t\t// or square bracket in the match itself.\n\t\t\tif( this.matchHasUnbalancedClosingParen( matchStr ) ) {\n\t\t\t\tmatchStr = matchStr.substr( 0, matchStr.length - 1 );  // remove the trailing \")\"\n\t\t\t} else {\n\t\t\t\t// Handle an invalid character after the TLD\n\t\t\t\tlet pos = this.matchHasInvalidCharAfterTld( matchStr, schemeUrlMatch );\n\t\t\t\tif( pos > -1 ) {\n\t\t\t\t\tmatchStr = matchStr.substr( 0, pos ); // remove the trailing invalid chars\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The autolinker accepts many characters in a url's scheme (like `fake://test.com`).\n\t\t\t// However, in cases where a URL is missing whitespace before an obvious link,\n\t\t\t// (for example: `nowhitespacehttp://www.test.com`), we only want the match to start\n\t\t\t// at the http:// part. We will check if the match contains a common scheme and then \n\t\t\t// shift the match to start from there. \t\t\n\t\t\tconst foundCommonScheme = [ 'http://', 'https://' ].find(\n\t\t\t\t(commonScheme) => !!schemeUrlMatch && schemeUrlMatch.indexOf( commonScheme ) !== -1\n\t\t\t);\n\t\t\tif ( foundCommonScheme  ) {\n\t\t\t\t// If we found an overmatched URL, we want to find the index\n\t\t\t\t// of where the match should start and shift the match to\n\t\t\t\t// start from the beginning of the common scheme\n\t\t\t\tconst indexOfSchemeStart = matchStr.indexOf( foundCommonScheme );\n\n\t\t\t\tmatchStr = matchStr.substr( indexOfSchemeStart );\n\t\t\t\tschemeUrlMatch = schemeUrlMatch.substr( indexOfSchemeStart );\n\t\t\t\toffset = offset + indexOfSchemeStart;\n\t\t\t}\n\n\t\t\tlet urlMatchType: UrlMatchTypeOptions = schemeUrlMatch ? 'scheme' : ( wwwUrlMatch ? 'www' : 'tld' ),\n\t\t\t    protocolUrlMatch = !!schemeUrlMatch;\n\n\t\t\tmatches.push( new UrlMatch( {\n\t\t\t\ttagBuilder            : tagBuilder,\n\t\t\t\tmatchedText           : matchStr,\n\t\t\t\toffset                : offset,\n\t\t\t\turlMatchType          : urlMatchType,\n\t\t\t\turl                   : matchStr,\n\t\t\t\tprotocolUrlMatch      : protocolUrlMatch,\n\t\t\t\tprotocolRelativeMatch : !!protocolRelativeMatch,\n\t\t\t\tstripPrefix           : stripPrefix,\n\t\t\t\tstripTrailingSlash    : stripTrailingSlash,\n\t\t\t\tdecodePercentEncoding : decodePercentEncoding,\n\t\t\t} ) );\n\t\t}\n\n\t\treturn matches;\n\t}\n\n\n\t/**\n\t * Determines if a match found has an unmatched closing parenthesis,\n\t * square bracket or curly bracket. If so, the symbol will be removed\n\t * from the match itself, and appended after the generated anchor tag.\n\t *\n\t * A match may have an extra closing parenthesis at the end of the match\n\t * because the regular expression must include parenthesis for URLs such as\n\t * \"wikipedia.com/something_(disambiguation)\", which should be auto-linked.\n\t *\n\t * However, an extra parenthesis *will* be included when the URL itself is\n\t * wrapped in parenthesis, such as in the case of: \n\t *     \"(wikipedia.com/something_(disambiguation))\"\n\t * In this case, the last closing parenthesis should *not* be part of the\n\t * URL itself, and this method will return `true`. \n\t * \n\t * For square brackets in URLs such as in PHP arrays, the same behavior as \n\t * parenthesis discussed above should happen:\n\t *     \"[http://www.example.com/foo.php?bar[]=1&bar[]=2&bar[]=3]\"\n\t * The closing square bracket should not be part of the URL itself, and this\n\t * method will return `true`.\n\t *\n\t * @protected\n\t * @param {String} matchStr The full match string from the {@link #matcherRegex}.\n\t * @return {Boolean} `true` if there is an unbalanced closing parenthesis or\n\t *   square bracket at the end of the `matchStr`, `false` otherwise.\n\t */\n\tprotected matchHasUnbalancedClosingParen( matchStr: string ): boolean {\n\t\tlet endChar = matchStr.charAt( matchStr.length - 1 );\n\t\tlet startChar: string;\n\n\t\tif( endChar === ')' ) {\n\t\t\tstartChar = '(';\n\t\t} else if( endChar === ']' ) {\n\t\t\tstartChar = '[';\n\t\t} else if ( endChar === '}' ) {\n\t\t\tstartChar = '{';\n\t\t} else {\n\t\t\treturn false;  // not a close parenthesis or square bracket\n\t\t}\n\n\t\t// Find if there are the same number of open braces as close braces in\n\t\t// the URL string, minus the last character (which we have already \n\t\t// determined to be either ')', ']' or '}'\n\t\tlet numOpenBraces = 0;\n\t\tfor( let i = 0, len = matchStr.length - 1; i < len; i++ ) {\n\t\t\tconst char = matchStr.charAt( i );\n\n\t\t\tif( char === startChar ) {\n\t\t\t\tnumOpenBraces++;\n\t\t\t} else if( char === endChar ) {\n\t\t\t\tnumOpenBraces = Math.max( numOpenBraces - 1, 0 );\n\t\t\t}\n\t\t}\n\n\t\t// If the number of open braces matches the number of close braces in\n\t\t// the URL minus the last character, then the match has *unbalanced*\n\t\t// braces because of the last character. Example of unbalanced braces\n\t\t// from the regex match:\n\t\t//     \"http://example.com?a[]=1]\"\n\t\tif( numOpenBraces === 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\n\t/**\n\t * Determine if there's an invalid character after the TLD in a URL. Valid\n\t * characters after TLD are ':/?#'. Exclude scheme matched URLs from this\n\t * check.\n\t *\n\t * @protected\n\t * @param {String} urlMatch The matched URL, if there was one. Will be an\n\t *   empty string if the match is not a URL match.\n\t * @param {String} schemeUrlMatch The match URL string for a scheme\n\t *   match. Ex: 'http://yahoo.com'. This is used to match something like\n\t *   'http://localhost', where we won't double check that the domain name\n\t *   has at least one '.' in it.\n\t * @return {Number} the position where the invalid character was found. If\n\t *   no such character was found, returns -1\n\t */\n\tprotected matchHasInvalidCharAfterTld( urlMatch: string, schemeUrlMatch: string ) {\n\t\tif( !urlMatch ) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tlet offset = 0;\n\t\tif ( schemeUrlMatch ) {\n\t\t\toffset = urlMatch.indexOf(':');\n\t\t\turlMatch = urlMatch.slice(offset);\n\t\t}\n\n\t\tlet re = new RegExp( \"^((.?\\/\\/)?[-.\" + alphaNumericAndMarksCharsStr + \"]*[-\" + alphaNumericAndMarksCharsStr + \"]\\\\.[-\" + alphaNumericAndMarksCharsStr + \"]+)\" );\n\t\tlet res = re.exec( urlMatch );\n\t\tif ( res === null ) {\n\t\t\treturn -1;\n\t\t}\n\n\t\toffset += res[1].length;\n\t\turlMatch = urlMatch.slice(res[1].length);\n\t\tif (/^[^-.A-Za-z0-9:\\/?#]/.test(urlMatch)) {\n\t\t\treturn offset;\n\t\t}\n\n\t\treturn -1;\n\t}\n\n}\n\nexport interface UrlMatcherConfig extends MatcherConfig {\n\tstripPrefix: Required<StripPrefixConfigObj>;\n\tstripTrailingSlash: boolean;\n\tdecodePercentEncoding: boolean;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}