{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Match } from \"./match\";\n/**\r\n * @class Autolinker.match.Mention\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Mention match found in an input string which should be Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\r\n */\nvar MentionMatch = /** @class */function (_super) {\n  tslib_1.__extends(MentionMatch, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match\r\n   *   instance, specified in an Object (map).\r\n   */\n  function MentionMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @cfg {String} serviceName\r\n     *\r\n     * The service to point mention matches to. See {@link Autolinker#mention}\r\n     * for available values.\r\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @cfg {String} mention (required)\r\n     *\r\n     * The Mention that was matched, without the '@' character.\r\n     */\n    _this.mention = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.mention = cfg.mention;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\r\n   * Returns a string name for the type of match that this class represents.\r\n   * For the case of MentionMatch, returns 'mention'.\r\n   *\r\n   * @return {String}\r\n   */\n  MentionMatch.prototype.getType = function () {\n    return 'mention';\n  };\n  /**\r\n   * Returns the mention, without the '@' character.\r\n   *\r\n   * @return {String}\r\n   */\n  MentionMatch.prototype.getMention = function () {\n    return this.mention;\n  };\n  /**\r\n   * Returns the configured {@link #serviceName} to point the mention to.\r\n   * Ex: 'instagram', 'twitter', 'soundcloud'.\r\n   *\r\n   * @return {String}\r\n   */\n  MentionMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\r\n   * Returns the anchor href that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n  MentionMatch.prototype.getAnchorHref = function () {\n    switch (this.serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/' + this.mention;\n      case 'instagram':\n        return 'https://instagram.com/' + this.mention;\n      case 'soundcloud':\n        return 'https://soundcloud.com/' + this.mention;\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point mention to: ' + this.serviceName);\n    }\n  };\n  /**\r\n   * Returns the anchor text that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n  MentionMatch.prototype.getAnchorText = function () {\n    return '@' + this.mention;\n  };\n  /**\r\n   * Returns the CSS class suffixes that should be used on a tag built with\r\n   * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\r\n   * details.\r\n   *\r\n   * @return {String[]}\r\n   */\n  MentionMatch.prototype.getCssClassSuffixes = function () {\n    var cssClassSuffixes = _super.prototype.getCssClassSuffixes.call(this),\n      serviceName = this.getServiceName();\n    if (serviceName) {\n      cssClassSuffixes.push(serviceName);\n    }\n    return cssClassSuffixes;\n  };\n  return MentionMatch;\n}(Match);\nexport { MentionMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,QAAqB,SAAS;AAG5C;;;;;;;;AAQA;EAAkCC;EAkBjC;;;;;EAKA,sBAAaC,GAAuB;IAApC,YACCC,kBAAOD,GAAG,CAAE;IAtBb;;;;;;IAMiBE,iBAAW,GAAoB,SAAS,CAAC,CAAE;IAE5D;;;;;IAKiBA,aAAO,GAAW,EAAE,CAAC,CAAE;IAWvCA,KAAI,CAACC,OAAO,GAAGH,GAAG,CAACG,OAAO;IAC1BD,KAAI,CAACE,WAAW,GAAGJ,GAAG,CAACI,WAAW;;EACnC;EAGA;;;;;;EAMAC,8BAAO,GAAP;IACC,OAAO,SAAS;EACjB,CAAC;EAGD;;;;;EAKAA,iCAAU,GAAV;IACC,OAAO,IAAI,CAACF,OAAO;EACpB,CAAC;EAGD;;;;;;EAMAE,qCAAc,GAAd;IACC,OAAO,IAAI,CAACD,WAAW;EACxB,CAAC;EAGD;;;;;EAKAC,oCAAa,GAAb;IACC,QAAQ,IAAI,CAACD,WAAW;MACvB,KAAK,SAAS;QACb,OAAO,sBAAsB,GAAG,IAAI,CAACD,OAAO;MAC7C,KAAK,WAAW;QACf,OAAO,wBAAwB,GAAG,IAAI,CAACA,OAAO;MAC/C,KAAK,YAAY;QAChB,OAAO,yBAAyB,GAAG,IAAI,CAACA,OAAO;MAEhD;QAAW;QACV,MAAM,IAAIG,KAAK,CAAE,4CAA4C,GAAG,IAAI,CAACF,WAAW,CAAE;IAAC;EAEtF,CAAC;EAGD;;;;;EAKAC,oCAAa,GAAb;IACC,OAAO,GAAG,GAAG,IAAI,CAACF,OAAO;EAC1B,CAAC;EAGD;;;;;;;EAOAE,0CAAmB,GAAnB;IACC,IAAIE,gBAAgB,GAAGN,iBAAMO,mBAAmB,WAAE;MAC9CJ,WAAW,GAAG,IAAI,CAACK,cAAc,EAAE;IAEvC,IAAIL,WAAW,EAAG;MACjBG,gBAAgB,CAACG,IAAI,CAAEN,WAAW,CAAE;;IAErC,OAAOG,gBAAgB;EACxB,CAAC;EAEF,mBAAC;AAAD,CA9GA,CAAkCT,KAAK","names":["Match","tslib_1","cfg","_super","_this","mention","serviceName","MentionMatch","Error","cssClassSuffixes","getCssClassSuffixes","getServiceName","push"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\match\\mention-match.ts"],"sourcesContent":["import { Match, MatchConfig } from \"./match\";\nimport { MentionServices } from \"../autolinker\";\n\n/**\n * @class Autolinker.match.Mention\n * @extends Autolinker.match.Match\n *\n * Represents a Mention match found in an input string which should be Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more details.\n */\nexport class MentionMatch extends Match {\n\n\t/**\n\t * @cfg {String} serviceName\n\t *\n\t * The service to point mention matches to. See {@link Autolinker#mention}\n\t * for available values.\n\t */\n\tprivate readonly serviceName: MentionServices = 'twitter';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} mention (required)\n\t *\n\t * The Mention that was matched, without the '@' character.\n\t */\n\tprivate readonly mention: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: MentionMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.mention = cfg.mention;\n\t\tthis.serviceName = cfg.serviceName;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of MentionMatch, returns 'mention'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'mention';\n\t}\n\n\n\t/**\n\t * Returns the mention, without the '@' character.\n\t *\n\t * @return {String}\n\t */\n\tgetMention() {\n\t\treturn this.mention;\n\t}\n\n\n\t/**\n\t * Returns the configured {@link #serviceName} to point the mention to.\n\t * Ex: 'instagram', 'twitter', 'soundcloud'.\n\t *\n\t * @return {String}\n\t */\n\tgetServiceName() {\n\t\treturn this.serviceName;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\tswitch( this.serviceName ) {\n\t\t\tcase 'twitter' :\n\t\t\t\treturn 'https://twitter.com/' + this.mention;\n\t\t\tcase 'instagram' :\n\t\t\t\treturn 'https://instagram.com/' + this.mention;\n\t\t\tcase 'soundcloud' :\n\t\t\t\treturn 'https://soundcloud.com/' + this.mention;\n\n\t\t\tdefault :  // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n\t\t\t\tthrow new Error( 'Unknown service name to point mention to: ' + this.serviceName );\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\treturn '@' + this.mention;\n\t}\n\n\n\t/**\n\t * Returns the CSS class suffixes that should be used on a tag built with\n\t * the match. See {@link Autolinker.match.Match#getCssClassSuffixes} for\n\t * details.\n\t *\n\t * @return {String[]}\n\t */\n\tgetCssClassSuffixes() {\n\t\tlet cssClassSuffixes = super.getCssClassSuffixes(),\n\t\t    serviceName = this.getServiceName();\n\n\t\tif( serviceName ) {\n\t\t\tcssClassSuffixes.push( serviceName );\n\t\t}\n\t\treturn cssClassSuffixes;\n\t}\n\n}\n\nexport interface MentionMatchConfig extends MatchConfig {\n\tserviceName: MentionServices;\n\tmention: string;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}