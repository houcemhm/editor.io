{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Match } from \"./match\";\n/**\r\n * @class Autolinker.match.Hashtag\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Hashtag match found in an input string which should be\r\n * Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more\r\n * details.\r\n */\nvar HashtagMatch = /** @class */function (_super) {\n  tslib_1.__extends(HashtagMatch, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match\r\n   *   instance, specified in an Object (map).\r\n   */\n  function HashtagMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @cfg {String} serviceName\r\n     *\r\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\r\n     * for available values.\r\n     */\n    _this.serviceName = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @cfg {String} hashtag (required)\r\n     *\r\n     * The HashtagMatch that was matched, without the '#'.\r\n     */\n    _this.hashtag = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.serviceName = cfg.serviceName;\n    _this.hashtag = cfg.hashtag;\n    return _this;\n  }\n  /**\r\n   * Returns a string name for the type of match that this class represents.\r\n   * For the case of HashtagMatch, returns 'hashtag'.\r\n   *\r\n   * @return {String}\r\n   */\n  HashtagMatch.prototype.getType = function () {\n    return 'hashtag';\n  };\n  /**\r\n   * Returns the configured {@link #serviceName} to point the HashtagMatch to.\r\n   * Ex: 'facebook', 'twitter'.\r\n   *\r\n   * @return {String}\r\n   */\n  HashtagMatch.prototype.getServiceName = function () {\n    return this.serviceName;\n  };\n  /**\r\n   * Returns the matched hashtag, without the '#' character.\r\n   *\r\n   * @return {String}\r\n   */\n  HashtagMatch.prototype.getHashtag = function () {\n    return this.hashtag;\n  };\n  /**\r\n   * Returns the anchor href that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n  HashtagMatch.prototype.getAnchorHref = function () {\n    var serviceName = this.serviceName,\n      hashtag = this.hashtag;\n    switch (serviceName) {\n      case 'twitter':\n        return 'https://twitter.com/hashtag/' + hashtag;\n      case 'facebook':\n        return 'https://www.facebook.com/hashtag/' + hashtag;\n      case 'instagram':\n        return 'https://instagram.com/explore/tags/' + hashtag;\n      default:\n        // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n        throw new Error('Unknown service name to point hashtag to: ' + serviceName);\n    }\n  };\n  /**\r\n   * Returns the anchor text that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n  HashtagMatch.prototype.getAnchorText = function () {\n    return '#' + this.hashtag;\n  };\n  return HashtagMatch;\n}(Match);\nexport { HashtagMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,QAAqB,SAAS;AAE5C;;;;;;;;;;AAUA;EAAkCC;EAkBjC;;;;;EAKA,sBAAaC,GAAuB;IAApC,YACCC,kBAAOD,GAAG,CAAE;IAtBb;;;;;;IAMiBE,iBAAW,GAAW,EAAE,CAAC,CAAE;IAE5C;;;;;IAKiBA,aAAO,GAAW,EAAE,CAAC,CAAE;IAWvCA,KAAI,CAACC,WAAW,GAAGH,GAAG,CAACG,WAAW;IAClCD,KAAI,CAACE,OAAO,GAAGJ,GAAG,CAACI,OAAO;;EAC3B;EAGA;;;;;;EAMAC,8BAAO,GAAP;IACC,OAAO,SAAS;EACjB,CAAC;EAGD;;;;;;EAMAA,qCAAc,GAAd;IACC,OAAO,IAAI,CAACF,WAAW;EACxB,CAAC;EAGD;;;;;EAKAE,iCAAU,GAAV;IACC,OAAO,IAAI,CAACD,OAAO;EACpB,CAAC;EAGD;;;;;EAKAC,oCAAa,GAAb;IACC,IAAIF,WAAW,GAAG,IAAI,CAACA,WAAW;MAC9BC,OAAO,GAAG,IAAI,CAACA,OAAO;IAE1B,QAAQD,WAAW;MAClB,KAAK,SAAS;QACb,OAAO,8BAA8B,GAAGC,OAAO;MAChD,KAAK,UAAU;QACd,OAAO,mCAAmC,GAAGA,OAAO;MACrD,KAAK,WAAW;QACf,OAAO,qCAAqC,GAAGA,OAAO;MAEvD;QAAW;QACV,MAAM,IAAIE,KAAK,CAAE,4CAA4C,GAAGH,WAAW,CAAE;IAAC;EAEjF,CAAC;EAGD;;;;;EAKAE,oCAAa,GAAb;IACC,OAAO,GAAG,GAAG,IAAI,CAACD,OAAO;EAC1B,CAAC;EAEF,mBAAC;AAAD,CA/FA,CAAkCN,KAAK","names":["Match","tslib_1","cfg","_super","_this","serviceName","hashtag","HashtagMatch","Error"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\match\\hashtag-match.ts"],"sourcesContent":["import { Match, MatchConfig } from \"./match\";\n\n/**\n * @class Autolinker.match.Hashtag\n * @extends Autolinker.match.Match\n *\n * Represents a Hashtag match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nexport class HashtagMatch extends Match {\n\n\t/**\n\t * @cfg {String} serviceName\n\t *\n\t * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n\t * for available values.\n\t */\n\tprivate readonly serviceName: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {String} hashtag (required)\n\t *\n\t * The HashtagMatch that was matched, without the '#'.\n\t */\n\tprivate readonly hashtag: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: HashtagMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.serviceName = cfg.serviceName;\n\t\tthis.hashtag = cfg.hashtag;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of HashtagMatch, returns 'hashtag'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'hashtag';\n\t}\n\n\n\t/**\n\t * Returns the configured {@link #serviceName} to point the HashtagMatch to.\n\t * Ex: 'facebook', 'twitter'.\n\t *\n\t * @return {String}\n\t */\n\tgetServiceName() {\n\t\treturn this.serviceName;\n\t}\n\n\n\t/**\n\t * Returns the matched hashtag, without the '#' character.\n\t *\n\t * @return {String}\n\t */\n\tgetHashtag() {\n\t\treturn this.hashtag;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\tlet serviceName = this.serviceName,\n\t\t    hashtag = this.hashtag;\n\n\t\tswitch( serviceName ) {\n\t\t\tcase 'twitter' :\n\t\t\t\treturn 'https://twitter.com/hashtag/' + hashtag;\n\t\t\tcase 'facebook' :\n\t\t\t\treturn 'https://www.facebook.com/hashtag/' + hashtag;\n\t\t\tcase 'instagram' :\n\t\t\t\treturn 'https://instagram.com/explore/tags/' + hashtag;\n\n\t\t\tdefault :  // Shouldn't happen because Autolinker's constructor should block any invalid values, but just in case.\n\t\t\t\tthrow new Error( 'Unknown service name to point hashtag to: ' + serviceName );\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\treturn '#' + this.hashtag;\n\t}\n\n}\n\nexport interface HashtagMatchConfig extends MatchConfig {\n\tserviceName: string;\n\thashtag: string;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}