{"ast":null,"code":"/**\n * @abstract\n * @class Autolinker.matcher.Matcher\n *\n * An abstract class and interface for individual matchers to find matches in\n * an input string with linkified versions of them.\n *\n * Note that Matchers do not take HTML into account - they must be fed the text\n * nodes of any HTML string, which is handled by {@link Autolinker#parse}.\n */\nvar Matcher = /** @class */function () {\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Matcher\n   *   instance, specified in an Object (map).\n   */\n  function Matcher(cfg) {\n    /**\n     * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n     *\n     * Reference to the AnchorTagBuilder instance to use to generate HTML tags\n     * for {@link Autolinker.match.Match Matches}.\n     */\n    this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n    this.tagBuilder = cfg.tagBuilder;\n  }\n  return Matcher;\n}();\nexport { Matcher };","map":{"version":3,"mappings":"AAGA;;;;;;;;;;AAUA;EAcC;;;;;EAKA,iBAAaA,GAAkB;IAjB/B;;;;;;IAMQ,yBAAoB,GAAG,IAAI,CAAC,CAAE;IAYrC,IAAI,CAACC,UAAU,GAAGD,GAAG,CAACC,UAAU;EACjC;EAaD,cAAC;AAAD,CAlCA,EAkCC","names":["cfg","tagBuilder"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\matcher\\matcher.ts"],"sourcesContent":["import { AnchorTagBuilder } from \"../anchor-tag-builder\";\nimport { Match } from \"../match/match\";\n\n/**\n * @abstract\n * @class Autolinker.matcher.Matcher\n *\n * An abstract class and interface for individual matchers to find matches in\n * an input string with linkified versions of them.\n *\n * Note that Matchers do not take HTML into account - they must be fed the text\n * nodes of any HTML string, which is handled by {@link Autolinker#parse}.\n */\nexport abstract class Matcher {\n\n\t/**\n\t * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n\t *\n\t * Reference to the AnchorTagBuilder instance to use to generate HTML tags\n\t * for {@link Autolinker.match.Match Matches}.\n\t */\n\tprivate __jsduckDummyDocProp = null;  // property used just to get the above doc comment into the ES5 output and documentation generator\n\n\t// Actual property for the above jsdoc comment\n\tprotected tagBuilder: AnchorTagBuilder;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Matcher\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: MatcherConfig ) {\n\t\tthis.tagBuilder = cfg.tagBuilder;\n\t}\n\n\n\t/**\n\t * Parses the input `text` and returns the array of {@link Autolinker.match.Match Matches}\n\t * for the matcher.\n\t *\n\t * @abstract\n\t * @param {String} text The text to scan and replace matches in.\n\t * @return {Autolinker.match.Match[]}\n\t */\n\tabstract parseMatches( text: string ): Match[];\n\n}\n\nexport interface MatcherConfig {\n\ttagBuilder: AnchorTagBuilder;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}