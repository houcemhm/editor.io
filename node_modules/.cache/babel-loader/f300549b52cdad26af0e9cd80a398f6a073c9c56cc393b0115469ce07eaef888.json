{"ast":null,"code":"// Load in dependencies\nvar computedStyle = require('computed-style');\n\n/**\n * Calculate the `line-height` of a given node\n * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.\n * @returns {Number} `line-height` of the element in pixels\n */\nfunction lineHeight(node) {\n  // Grab the line-height via style\n  var lnHeightStr = computedStyle(node, 'line-height');\n  var lnHeight = parseFloat(lnHeightStr, 10);\n\n  // If the lineHeight did not contain a unit (i.e. it was numeric), convert it to ems (e.g. '2.3' === '2.3em')\n  if (lnHeightStr === lnHeight + '') {\n    // Save the old lineHeight style and update the em unit to the element\n    var _lnHeightStyle = node.style.lineHeight;\n    node.style.lineHeight = lnHeightStr + 'em';\n\n    // Calculate the em based height\n    lnHeightStr = computedStyle(node, 'line-height');\n    lnHeight = parseFloat(lnHeightStr, 10);\n\n    // Revert the lineHeight style\n    if (_lnHeightStyle) {\n      node.style.lineHeight = _lnHeightStyle;\n    } else {\n      delete node.style.lineHeight;\n    }\n  }\n\n  // If the lineHeight is in `pt`, convert it to pixels (4px for 3pt)\n  // DEV: `em` units are converted to `pt` in IE6\n  // Conversion ratio from https://developer.mozilla.org/en-US/docs/Web/CSS/length\n  if (lnHeightStr.indexOf('pt') !== -1) {\n    lnHeight *= 4;\n    lnHeight /= 3;\n    // Otherwise, if the lineHeight is in `mm`, convert it to pixels (96px for 25.4mm)\n  } else if (lnHeightStr.indexOf('mm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 25.4;\n    // Otherwise, if the lineHeight is in `cm`, convert it to pixels (96px for 2.54cm)\n  } else if (lnHeightStr.indexOf('cm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 2.54;\n    // Otherwise, if the lineHeight is in `in`, convert it to pixels (96px for 1in)\n  } else if (lnHeightStr.indexOf('in') !== -1) {\n    lnHeight *= 96;\n    // Otherwise, if the lineHeight is in `pc`, convert it to pixels (12pt for 1pc)\n  } else if (lnHeightStr.indexOf('pc') !== -1) {\n    lnHeight *= 16;\n  }\n\n  // Continue our computation\n  lnHeight = Math.round(lnHeight);\n\n  // If the line-height is \"normal\", calculate by font-size\n  if (lnHeightStr === 'normal') {\n    // Create a temporary node\n    var nodeName = node.nodeName;\n    var _node = document.createElement(nodeName);\n    _node.innerHTML = '&nbsp;';\n\n    // If we have a text area, reset it to only 1 row\n    // https://github.com/twolfson/line-height/issues/4\n    if (nodeName.toUpperCase() === 'TEXTAREA') {\n      _node.setAttribute('rows', '1');\n    }\n\n    // Set the font-size of the element\n    var fontSizeStr = computedStyle(node, 'font-size');\n    _node.style.fontSize = fontSizeStr;\n\n    // Remove default padding/border which can affect offset height\n    // https://github.com/twolfson/line-height/issues/4\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight\n    _node.style.padding = '0px';\n    _node.style.border = '0px';\n\n    // Append it to the body\n    var body = document.body;\n    body.appendChild(_node);\n\n    // Assume the line height of the element is the height\n    var height = _node.offsetHeight;\n    lnHeight = height;\n\n    // Remove our child from the DOM\n    body.removeChild(_node);\n  }\n\n  // Return the calculated height\n  return lnHeight;\n}\n\n// Export lineHeight\nmodule.exports = lineHeight;","map":{"version":3,"names":["computedStyle","require","lineHeight","node","lnHeightStr","lnHeight","parseFloat","_lnHeightStyle","style","indexOf","Math","round","nodeName","_node","document","createElement","innerHTML","toUpperCase","setAttribute","fontSizeStr","fontSize","padding","border","body","appendChild","height","offsetHeight","removeChild","module","exports"],"sources":["D:/github/editor.io/node_modules/line-height/lib/line-height.js"],"sourcesContent":["// Load in dependencies\nvar computedStyle = require('computed-style');\n\n/**\n * Calculate the `line-height` of a given node\n * @param {HTMLElement} node Element to calculate line height of. Must be in the DOM.\n * @returns {Number} `line-height` of the element in pixels\n */\nfunction lineHeight(node) {\n  // Grab the line-height via style\n  var lnHeightStr = computedStyle(node, 'line-height');\n  var lnHeight = parseFloat(lnHeightStr, 10);\n\n  // If the lineHeight did not contain a unit (i.e. it was numeric), convert it to ems (e.g. '2.3' === '2.3em')\n  if (lnHeightStr === lnHeight + '') {\n    // Save the old lineHeight style and update the em unit to the element\n    var _lnHeightStyle = node.style.lineHeight;\n    node.style.lineHeight = lnHeightStr + 'em';\n\n    // Calculate the em based height\n    lnHeightStr = computedStyle(node, 'line-height');\n    lnHeight = parseFloat(lnHeightStr, 10);\n\n    // Revert the lineHeight style\n    if (_lnHeightStyle) {\n      node.style.lineHeight = _lnHeightStyle;\n    } else {\n      delete node.style.lineHeight;\n    }\n  }\n\n  // If the lineHeight is in `pt`, convert it to pixels (4px for 3pt)\n  // DEV: `em` units are converted to `pt` in IE6\n  // Conversion ratio from https://developer.mozilla.org/en-US/docs/Web/CSS/length\n  if (lnHeightStr.indexOf('pt') !== -1) {\n    lnHeight *= 4;\n    lnHeight /= 3;\n  // Otherwise, if the lineHeight is in `mm`, convert it to pixels (96px for 25.4mm)\n  } else if (lnHeightStr.indexOf('mm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 25.4;\n  // Otherwise, if the lineHeight is in `cm`, convert it to pixels (96px for 2.54cm)\n  } else if (lnHeightStr.indexOf('cm') !== -1) {\n    lnHeight *= 96;\n    lnHeight /= 2.54;\n  // Otherwise, if the lineHeight is in `in`, convert it to pixels (96px for 1in)\n  } else if (lnHeightStr.indexOf('in') !== -1) {\n    lnHeight *= 96;\n  // Otherwise, if the lineHeight is in `pc`, convert it to pixels (12pt for 1pc)\n  } else if (lnHeightStr.indexOf('pc') !== -1) {\n    lnHeight *= 16;\n  }\n\n  // Continue our computation\n  lnHeight = Math.round(lnHeight);\n\n  // If the line-height is \"normal\", calculate by font-size\n  if (lnHeightStr === 'normal') {\n    // Create a temporary node\n    var nodeName = node.nodeName;\n    var _node = document.createElement(nodeName);\n    _node.innerHTML = '&nbsp;';\n\n    // If we have a text area, reset it to only 1 row\n    // https://github.com/twolfson/line-height/issues/4\n    if (nodeName.toUpperCase() === 'TEXTAREA') {\n      _node.setAttribute('rows', '1');\n    }\n\n    // Set the font-size of the element\n    var fontSizeStr = computedStyle(node, 'font-size');\n    _node.style.fontSize = fontSizeStr;\n\n    // Remove default padding/border which can affect offset height\n    // https://github.com/twolfson/line-height/issues/4\n    // https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight\n    _node.style.padding = '0px';\n    _node.style.border = '0px';\n\n    // Append it to the body\n    var body = document.body;\n    body.appendChild(_node);\n\n    // Assume the line height of the element is the height\n    var height = _node.offsetHeight;\n    lnHeight = height;\n\n    // Remove our child from the DOM\n    body.removeChild(_node);\n  }\n\n  // Return the calculated height\n  return lnHeight;\n}\n\n// Export lineHeight\nmodule.exports = lineHeight;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}