{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { letterRe, digitRe, whitespaceRe, quoteRe, controlCharsRe } from '../regex-lib';\nimport { throwUnhandledCaseError } from '../utils';\n// For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n/**\r\n * Parses an HTML string, calling the callbacks to notify of tags and text.\r\n *\r\n * ## History\r\n *\r\n * This file previously used a regular expression to find html tags in the input\r\n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues\r\n * with certain input text, causing Autolinker to either hang or just take a\r\n * really long time to parse the string.\r\n *\r\n * The current code is intended to be a O(n) algorithm that walks through\r\n * the string in one pass, and tries to be as cheap as possible. We don't need\r\n * to implement the full HTML spec, but rather simply determine where the string\r\n * looks like an HTML tag, and where it looks like text (so that we can autolink\r\n * that).\r\n *\r\n * This state machine parser is intended just to be a simple but performant\r\n * parser of HTML for the subset of requirements we have. We simply need to:\r\n *\r\n * 1. Determine where HTML tags are\r\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\r\n *    <script>, and <style> tags, so as not to link any text within them)\r\n *\r\n * We don't need to:\r\n *\r\n * 1. Create a parse tree\r\n * 2. Auto-close tags with invalid markup\r\n * 3. etc.\r\n *\r\n * The other intention behind this is that we didn't want to add external\r\n * dependencies on the Autolinker utility which would increase its size. For\r\n * instance, adding htmlparser2 adds 125kb to the minified output file,\r\n * increasing its final size from 47kb to 172kb (at the time of writing). It\r\n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\r\n * as an HTML tag.\r\n *\r\n * Reference for HTML spec:\r\n *\r\n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\r\n *\r\n * @param {String} html The HTML to parse\r\n * @param {Object} callbacks\r\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\r\n *   tag is parsed. Called with the tagName as its argument.\r\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\r\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\r\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\r\n * @param {Function} callbacks.onText Callback function to call when text (i.e\r\n *   not an HTML tag) is parsed. Called with the text (string) as its first\r\n *   argument, and offset (number) into the string as its second.\r\n */\nexport function parseHtml(html, _a) {\n  var onOpenTag = _a.onOpenTag,\n    onCloseTag = _a.onCloseTag,\n    onText = _a.onText,\n    onComment = _a.onComment,\n    onDoctype = _a.onDoctype;\n  var noCurrentTag = new CurrentTag();\n  var charIdx = 0,\n    len = html.length,\n    state = 0 /* Data */,\n    currentDataIdx = 0,\n    // where the current data start index is\n    currentTag = noCurrentTag; // describes the current tag that is being read\n  // For debugging: search for other \"For debugging\" lines\n  // const table = new CliTable( {\n  // \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n  // } );\n  while (charIdx < len) {\n    var char = html.charAt(charIdx);\n    // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push( \n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n    // );\n    switch (state) {\n      case 0 /* Data */:\n        stateData(char);\n        break;\n      case 1 /* TagOpen */:\n        stateTagOpen(char);\n        break;\n      case 2 /* EndTagOpen */:\n        stateEndTagOpen(char);\n        break;\n      case 3 /* TagName */:\n        stateTagName(char);\n        break;\n      case 4 /* BeforeAttributeName */:\n        stateBeforeAttributeName(char);\n        break;\n      case 5 /* AttributeName */:\n        stateAttributeName(char);\n        break;\n      case 6 /* AfterAttributeName */:\n        stateAfterAttributeName(char);\n        break;\n      case 7 /* BeforeAttributeValue */:\n        stateBeforeAttributeValue(char);\n        break;\n      case 8 /* AttributeValueDoubleQuoted */:\n        stateAttributeValueDoubleQuoted(char);\n        break;\n      case 9 /* AttributeValueSingleQuoted */:\n        stateAttributeValueSingleQuoted(char);\n        break;\n      case 10 /* AttributeValueUnquoted */:\n        stateAttributeValueUnquoted(char);\n        break;\n      case 11 /* AfterAttributeValueQuoted */:\n        stateAfterAttributeValueQuoted(char);\n        break;\n      case 12 /* SelfClosingStartTag */:\n        stateSelfClosingStartTag(char);\n        break;\n      case 13 /* MarkupDeclarationOpenState */:\n        stateMarkupDeclarationOpen(char);\n        break;\n      case 14 /* CommentStart */:\n        stateCommentStart(char);\n        break;\n      case 15 /* CommentStartDash */:\n        stateCommentStartDash(char);\n        break;\n      case 16 /* Comment */:\n        stateComment(char);\n        break;\n      case 17 /* CommentEndDash */:\n        stateCommentEndDash(char);\n        break;\n      case 18 /* CommentEnd */:\n        stateCommentEnd(char);\n        break;\n      case 19 /* CommentEndBang */:\n        stateCommentEndBang(char);\n        break;\n      case 20 /* Doctype */:\n        stateDoctype(char);\n        break;\n      default:\n        throwUnhandledCaseError(state);\n    }\n    // For debugging: search for other \"For debugging\" lines\n    // ALSO: Temporarily remove the 'const' keyword on the State enum\n    // table.push( \n    // \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n    // );\n    charIdx++;\n  }\n  if (currentDataIdx < charIdx) {\n    emitText();\n  }\n  // For debugging: search for other \"For debugging\" lines\n  // console.log( '\\n' + table.toString() );\n  // Called when non-tags are being read (i.e. the text around HTML â€ ags)\n  // https://www.w3.org/TR/html51/syntax.html#data-state\n  function stateData(char) {\n    if (char === '<') {\n      startNewTag();\n    }\n  }\n  // Called after a '<' is read from the Data state\n  // https://www.w3.org/TR/html51/syntax.html#tag-open-state\n  function stateTagOpen(char) {\n    if (char === '!') {\n      state = 13 /* MarkupDeclarationOpenState */;\n    } else if (char === '/') {\n      state = 2 /* EndTagOpen */;\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        isClosing: true\n      }));\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (letterRe.test(char)) {\n      // tag name start (and no '/' read)\n      state = 3 /* TagName */;\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        isOpening: true\n      }));\n    } else {\n      // Any other \n      state = 0 /* Data */;\n      currentTag = noCurrentTag;\n    }\n  }\n  // After a '<x', '</x' sequence is read (where 'x' is a letter character), \n  // this is to continue reading the tag name\n  // https://www.w3.org/TR/html51/syntax.html#tag-name-state\n  function stateTagName(char) {\n    if (whitespaceRe.test(char)) {\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        name: captureTagName()\n      }));\n      state = 4 /* BeforeAttributeName */;\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === '/') {\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        name: captureTagName()\n      }));\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '>') {\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        name: captureTagName()\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (!letterRe.test(char) && !digitRe.test(char) && char !== ':') {\n      // Anything else that does not form an html tag. Note: the colon \n      // character is accepted for XML namespaced tags\n      resetToDataState();\n    } else {\n      // continue reading tag name\n    }\n  }\n  // Called after the '/' is read from a '</' sequence\n  // https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n  function stateEndTagOpen(char) {\n    if (char === '>') {\n      // parse error. Encountered \"</>\". Skip it without treating as a tag\n      resetToDataState();\n    } else if (letterRe.test(char)) {\n      state = 3 /* TagName */;\n    } else {\n      // some other non-tag-like character, don't treat this as a tag\n      resetToDataState();\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n  function stateBeforeAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      // stay in BeforeAttributeName state - continue reading chars\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (char === \"=\" || quoteRe.test(char) || controlCharsRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other char, start of a new attribute name\n      state = 5 /* AttributeName */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n  function stateAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      state = 6 /* AfterAttributeName */;\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '=') {\n      state = 7 /* BeforeAttributeValue */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // anything else: continue reading attribute name\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n  function stateAfterAttributeName(char) {\n    if (whitespaceRe.test(char)) {\n      // ignore the character - continue reading\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '=') {\n      state = 7 /* BeforeAttributeValue */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else if (quoteRe.test(char)) {\n      // \"Parse error\" characters that, according to the spec, should be\n      // appended to the attribute name, but we'll treat these characters\n      // as not forming a real HTML tag\n      resetToDataState();\n    } else {\n      // Any other character, start a new attribute in the current tag\n      state = 5 /* AttributeName */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n  function stateBeforeAttributeValue(char) {\n    if (whitespaceRe.test(char)) {\n      // ignore the character - continue reading\n    } else if (char === \"\\\"\") {\n      state = 8 /* AttributeValueDoubleQuoted */;\n    } else if (char === \"'\") {\n      state = 9 /* AttributeValueSingleQuoted */;\n    } else if (/[>=`]/.test(char)) {\n      // Invalid chars after an '=' for an attribute value, don't count \n      // the current tag as an HTML tag\n      resetToDataState();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, consider it an unquoted attribute value\n      state = 10 /* AttributeValueUnquoted */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n  function stateAttributeValueDoubleQuoted(char) {\n    if (char === \"\\\"\") {\n      // end the current double-quoted attribute\n      state = 11 /* AfterAttributeValueQuoted */;\n    } else {\n      // consume the character as part of the double-quoted attribute value\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n  function stateAttributeValueSingleQuoted(char) {\n    if (char === \"'\") {\n      // end the current single-quoted attribute\n      state = 11 /* AfterAttributeValueQuoted */;\n    } else {\n      // consume the character as part of the double-quoted attribute value\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n  function stateAttributeValueUnquoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4 /* BeforeAttributeName */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, treat it as part of the attribute value\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n  function stateAfterAttributeValueQuoted(char) {\n    if (whitespaceRe.test(char)) {\n      state = 4 /* BeforeAttributeName */;\n    } else if (char === '/') {\n      state = 12 /* SelfClosingStartTag */;\n    } else if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      // start of another tag (ignore the previous, incomplete one)\n      startNewTag();\n    } else {\n      // Any other character, \"parse error\". Spec says to switch to the\n      // BeforeAttributeState and re-consume the character, as it may be\n      // the start of a new attribute name\n      state = 4 /* BeforeAttributeName */;\n      reconsumeCurrentCharacter();\n    }\n  }\n  // A '/' has just been read in the current tag (presumably for '/>'), and \n  // this handles the next character\n  // https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n  function stateSelfClosingStartTag(char) {\n    if (char === '>') {\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        isClosing: true\n      }));\n      emitTagAndPreviousTextNode(); // resets to Data state as well\n    } else {\n      state = 4 /* BeforeAttributeName */;\n    }\n  }\n  // https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n  // (HTML Comments or !DOCTYPE)\n  function stateMarkupDeclarationOpen(char) {\n    if (html.substr(charIdx, 2) === '--') {\n      // html comment\n      charIdx += 2; // \"consume\" characters\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        type: 'comment'\n      }));\n      state = 14 /* CommentStart */;\n    } else if (html.substr(charIdx, 7).toUpperCase() === 'DOCTYPE') {\n      charIdx += 7; // \"consume\" characters\n      currentTag = new CurrentTag(tslib_1.__assign({}, currentTag, {\n        type: 'doctype'\n      }));\n      state = 20 /* Doctype */;\n    } else {\n      // At this point, the spec specifies that the state machine should\n      // enter the \"bogus comment\" state, in which case any character(s) \n      // after the '<!' that were read should become an HTML comment up\n      // until the first '>' that is read (or EOF). Instead, we'll assume\n      // that a user just typed '<!' as part of text data\n      resetToDataState();\n    }\n  }\n  // Handles after the sequence '<!--' has been read\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-state\n  function stateCommentStart(char) {\n    if (char === '-') {\n      // We've read the sequence '<!---' at this point (3 dashes)\n      state = 15 /* CommentStartDash */;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence \n      // '<!-->'\n      resetToDataState();\n    } else {\n      // Any other char, take it as part of the comment\n      state = 16 /* Comment */;\n    }\n  }\n  // We've read the sequence '<!---' at this point (3 dashes)\n  // https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n  function stateCommentStartDash(char) {\n    if (char === '-') {\n      // We've read '<!----' (4 dashes) at this point\n      state = 18 /* CommentEnd */;\n    } else if (char === '>') {\n      // At this point, we'll assume the comment wasn't a real comment\n      // so we'll just emit it as data. We basically read the sequence \n      // '<!--->'\n      resetToDataState();\n    } else {\n      // Anything else, take it as a valid comment\n      state = 16 /* Comment */;\n    }\n  }\n  // Currently reading the comment's text (data)\n  // https://www.w3.org/TR/html51/syntax.html#comment-state\n  function stateComment(char) {\n    if (char === '-') {\n      state = 17 /* CommentEndDash */;\n    } else {\n      // Any other character, stay in the Comment state\n    }\n  }\n  // When we we've read the first dash inside a comment, it may signal the\n  // end of the comment if we read another dash\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n  function stateCommentEndDash(char) {\n    if (char === '-') {\n      state = 18 /* CommentEnd */;\n    } else {\n      // Wasn't a dash, must still be part of the comment\n      state = 16 /* Comment */;\n    }\n  }\n  // After we've read two dashes inside a comment, it may signal the end of \n  // the comment if we then read a '>' char\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-state\n  function stateCommentEnd(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '!') {\n      state = 19 /* CommentEndBang */;\n    } else if (char === '-') {\n      // A 3rd '-' has been read: stay in the CommentEnd state\n    } else {\n      // Anything else, switch back to the comment state since we didn't\n      // read the full \"end comment\" sequence (i.e. '-->')\n      state = 16 /* Comment */;\n    }\n  }\n  // We've read the sequence '--!' inside of a comment\n  // https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n  function stateCommentEndBang(char) {\n    if (char === '-') {\n      // We read the sequence '--!-' inside of a comment. The last dash\n      // could signify that the comment is going to close\n      state = 17 /* CommentEndDash */;\n    } else if (char === '>') {\n      // End of comment with the sequence '--!>'\n      emitTagAndPreviousTextNode();\n    } else {\n      // The '--!' was not followed by a '>', continue reading the \n      // comment's text\n      state = 16 /* Comment */;\n    }\n  }\n  /**\r\n   * For DOCTYPES in particular, we don't care about the attributes. Just\r\n   * advance to the '>' character and emit the tag, unless we find a '<'\r\n   * character in which case we'll start a new tag.\r\n   *\r\n   * Example doctype tag:\r\n   *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\r\n   *\r\n   * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\r\n   */\n  function stateDoctype(char) {\n    if (char === '>') {\n      emitTagAndPreviousTextNode();\n    } else if (char === '<') {\n      startNewTag();\n    } else {\n      // stay in the Doctype state\n    }\n  }\n  /**\r\n   * Resets the state back to the Data state, and removes the current tag.\r\n   *\r\n   * We'll generally run this function whenever a \"parse error\" is\r\n   * encountered, where the current tag that is being read no longer looks\r\n   * like a real HTML tag.\r\n   */\n  function resetToDataState() {\n    state = 0 /* Data */;\n    currentTag = noCurrentTag;\n  }\n  /**\r\n   * Starts a new HTML tag at the current index, ignoring any previous HTML\r\n   * tag that was being read.\r\n   *\r\n   * We'll generally run this function whenever we read a new '<' character,\r\n   * including when we read a '<' character inside of an HTML tag that we were\r\n   * previously reading.\r\n   */\n  function startNewTag() {\n    state = 1 /* TagOpen */;\n    currentTag = new CurrentTag({\n      idx: charIdx\n    });\n  }\n  /**\r\n   * Once we've decided to emit an open tag, that means we can also emit the\r\n   * text node before it.\r\n   */\n  function emitTagAndPreviousTextNode() {\n    var textBeforeTag = html.slice(currentDataIdx, currentTag.idx);\n    if (textBeforeTag) {\n      // the html tag was the first element in the html string, or two \n      // tags next to each other, in which case we should not emit a text \n      // node\n      onText(textBeforeTag, currentDataIdx);\n    }\n    if (currentTag.type === 'comment') {\n      onComment(currentTag.idx);\n    } else if (currentTag.type === 'doctype') {\n      onDoctype(currentTag.idx);\n    } else {\n      if (currentTag.isOpening) {\n        onOpenTag(currentTag.name, currentTag.idx);\n      }\n      if (currentTag.isClosing) {\n        // note: self-closing tags will emit both opening and closing\n        onCloseTag(currentTag.name, currentTag.idx);\n      }\n    }\n    // Since we just emitted a tag, reset to the data state for the next char\n    resetToDataState();\n    currentDataIdx = charIdx + 1;\n  }\n  function emitText() {\n    var text = html.slice(currentDataIdx, charIdx);\n    onText(text, currentDataIdx);\n    currentDataIdx = charIdx + 1;\n  }\n  /**\r\n   * Captures the tag name from the start of the tag to the current character\r\n   * index, and converts it to lower case\r\n   */\n  function captureTagName() {\n    var startIdx = currentTag.idx + (currentTag.isClosing ? 2 : 1);\n    return html.slice(startIdx, charIdx).toLowerCase();\n  }\n  /**\r\n   * Causes the main loop to re-consume the current character, such as after\r\n   * encountering a \"parse error\" that changed state and needs to reconsume\r\n   * the same character in that new state.\r\n   */\n  function reconsumeCurrentCharacter() {\n    charIdx--;\n  }\n}\nvar CurrentTag = /** @class */function () {\n  function CurrentTag(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n    this.idx = cfg.idx !== undefined ? cfg.idx : -1;\n    this.type = cfg.type || 'tag';\n    this.name = cfg.name || '';\n    this.isOpening = !!cfg.isOpening;\n    this.isClosing = !!cfg.isClosing;\n  }\n  return CurrentTag;\n}();","map":{"version":3,"mappings":"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","names":["letterRe","digitRe","whitespaceRe","quoteRe","controlCharsRe","throwUnhandledCaseError","parseHtml","html","_a","onOpenTag","onCloseTag","onText","onComment","onDoctype","noCurrentTag","CurrentTag","charIdx","len","length","state","currentDataIdx","currentTag","char","charAt","stateData","stateTagOpen","stateEndTagOpen","stateTagName","stateBeforeAttributeName","stateAttributeName","stateAfterAttributeName","stateBeforeAttributeValue","stateAttributeValueDoubleQuoted","stateAttributeValueSingleQuoted","stateAttributeValueUnquoted","stateAfterAttributeValueQuoted","stateSelfClosingStartTag","stateMarkupDeclarationOpen","stateCommentStart","stateCommentStartDash","stateComment","stateCommentEndDash","stateCommentEnd","stateCommentEndBang","stateDoctype","emitText","startNewTag","isClosing","test","isOpening","name","captureTagName","emitTagAndPreviousTextNode","resetToDataState","reconsumeCurrentCharacter","substr","type","toUpperCase","idx","textBeforeTag","slice","text","startIdx","toLowerCase","cfg","undefined"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\htmlParser\\parse-html.ts"],"sourcesContent":["import { State } from './state';\nimport { letterRe, digitRe, whitespaceRe, quoteRe, controlCharsRe } from '../regex-lib';\nimport { throwUnhandledCaseError } from '../utils';\n\n// For debugging: search for other \"For debugging\" lines\n// import CliTable from 'cli-table';\n\n/**\n * Parses an HTML string, calling the callbacks to notify of tags and text.\n *\n * ## History\n * \n * This file previously used a regular expression to find html tags in the input \n * text. Unfortunately, we ran into a bunch of catastrophic backtracking issues \n * with certain input text, causing Autolinker to either hang or just take a \n * really long time to parse the string.\n *\n * The current code is intended to be a O(n) algorithm that walks through\n * the string in one pass, and tries to be as cheap as possible. We don't need\n * to implement the full HTML spec, but rather simply determine where the string\n * looks like an HTML tag, and where it looks like text (so that we can autolink\n * that).\n * \n * This state machine parser is intended just to be a simple but performant\n * parser of HTML for the subset of requirements we have. We simply need to:\n *\n * 1. Determine where HTML tags are\n * 2. Determine the tag name (Autolinker specifically only cares about <a>,\n *    <script>, and <style> tags, so as not to link any text within them)\n *\n * We don't need to:\n *\n * 1. Create a parse tree\n * 2. Auto-close tags with invalid markup\n * 3. etc.\n * \n * The other intention behind this is that we didn't want to add external \n * dependencies on the Autolinker utility which would increase its size. For \n * instance, adding htmlparser2 adds 125kb to the minified output file,\n * increasing its final size from 47kb to 172kb (at the time of writing). It \n * also doesn't work exactly correctly, treating the string \"<3 blah blah blah\"\n * as an HTML tag.\n * \n * Reference for HTML spec: \n * \n *     https://www.w3.org/TR/html51/syntax.html#sec-tokenization\n *\n * @param {String} html The HTML to parse\n * @param {Object} callbacks\n * @param {Function} callbacks.onOpenTag Callback function to call when an open\n *   tag is parsed. Called with the tagName as its argument.\n * @param {Function} callbacks.onCloseTag Callback function to call when a close\n *   tag is parsed. Called with the tagName as its argument. If a self-closing\n *   tag is found, `onCloseTag` is called immediately after `onOpenTag`.\n * @param {Function} callbacks.onText Callback function to call when text (i.e\n *   not an HTML tag) is parsed. Called with the text (string) as its first \n *   argument, and offset (number) into the string as its second.\n */\nexport function parseHtml( html: string, { onOpenTag, onCloseTag, onText, onComment, onDoctype }: {\n\tonOpenTag: ( tagName: string, offset: number ) => void;\n\tonCloseTag: ( tagName: string, offset: number ) => void;\n\tonText: ( text: string, offset: number ) => void;\n\tonComment: ( offset: number ) => void;\n\tonDoctype: ( offset: number ) => void;\n} ) {\n\tconst noCurrentTag = new CurrentTag();\n\n\tlet charIdx = 0,\n\t\tlen = html.length,\n\t\tstate = State.Data as State,\n\n\t\tcurrentDataIdx = 0,  // where the current data start index is\n\t\tcurrentTag = noCurrentTag;  // describes the current tag that is being read\n\n\t// For debugging: search for other \"For debugging\" lines\n\t// const table = new CliTable( {\n\t// \thead: [ 'charIdx', 'char', 'state', 'currentDataIdx', 'currentOpenTagIdx', 'tag.type' ]\n\t// } );\n\n\twhile( charIdx < len ) {\n\t\tvar char = html.charAt( charIdx );\n\n\t\t// For debugging: search for other \"For debugging\" lines\n\t\t// ALSO: Temporarily remove the 'const' keyword on the State enum\n\t\t// table.push( \n\t\t// \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n\t\t// );\n\t\t\n\t\tswitch( state ) {\n\t\t\tcase State.Data: stateData( char ); break;\n\t\t\tcase State.TagOpen: stateTagOpen( char ); break;\n\t\t\tcase State.EndTagOpen: stateEndTagOpen( char ); break;\n\t\t\tcase State.TagName: stateTagName( char ); break;\n\t\t\tcase State.BeforeAttributeName: stateBeforeAttributeName( char ); break;\n\t\t\tcase State.AttributeName: stateAttributeName( char ); break;\n\t\t\tcase State.AfterAttributeName: stateAfterAttributeName( char ); break;\n\t\t\tcase State.BeforeAttributeValue: stateBeforeAttributeValue( char ); break;\n\t\t\tcase State.AttributeValueDoubleQuoted: stateAttributeValueDoubleQuoted( char ); break;\n\t\t\tcase State.AttributeValueSingleQuoted: stateAttributeValueSingleQuoted( char ); break;\n\t\t\tcase State.AttributeValueUnquoted: stateAttributeValueUnquoted( char ); break;\n\t\t\tcase State.AfterAttributeValueQuoted: stateAfterAttributeValueQuoted( char ); break;\n\t\t\tcase State.SelfClosingStartTag: stateSelfClosingStartTag( char ); break;\n\t\t\tcase State.MarkupDeclarationOpenState: stateMarkupDeclarationOpen( char ); break;\n\t\t\tcase State.CommentStart: stateCommentStart( char ); break;\n\t\t\tcase State.CommentStartDash: stateCommentStartDash( char ); break;\n\t\t\tcase State.Comment: stateComment( char ); break;\n\t\t\tcase State.CommentEndDash: stateCommentEndDash( char ); break;\n\t\t\tcase State.CommentEnd: stateCommentEnd( char ); break;\n\t\t\tcase State.CommentEndBang: stateCommentEndBang( char ); break;\n\t\t\tcase State.Doctype: stateDoctype( char ); break;\n\n\t\t\tdefault: \n\t\t\t\tthrowUnhandledCaseError( state );\n\t\t}\n\n\t\t// For debugging: search for other \"For debugging\" lines\n\t\t// ALSO: Temporarily remove the 'const' keyword on the State enum\n\t\t// table.push( \n\t\t// \t[ charIdx, char, State[ state ], currentDataIdx, currentTag.idx, currentTag.idx === -1 ? '' : currentTag.type ] \n\t\t// );\n\n\t\tcharIdx++;\n\t}\n\n\tif( currentDataIdx < charIdx ) {\n\t\temitText();\n\t}\n\n\t// For debugging: search for other \"For debugging\" lines\n\t// console.log( '\\n' + table.toString() );\n\n\n\n\t// Called when non-tags are being read (i.e. the text around HTML â€ ags)\n\t// https://www.w3.org/TR/html51/syntax.html#data-state\n\tfunction stateData( char: string ) {\n\t\tif( char === '<' ) {\n\t\t\tstartNewTag();\n\t\t}\n\t}\n\n\t// Called after a '<' is read from the Data state\n\t// https://www.w3.org/TR/html51/syntax.html#tag-open-state\n\tfunction stateTagOpen( char: string ) {\n\t\tif( char === '!' ) {\n\t\t\tstate = State.MarkupDeclarationOpenState;\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.EndTagOpen;\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, isClosing: true } );\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( letterRe.test( char ) ) {\n\t\t\t// tag name start (and no '/' read)\n\t\t\tstate = State.TagName;\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, isOpening: true } );\n\n\t\t} else {\n\t\t\t// Any other \n\t\t\tstate = State.Data;\n\t\t\tcurrentTag = noCurrentTag;\n\t\t}\n\t}\n\n\t// After a '<x', '</x' sequence is read (where 'x' is a letter character), \n\t// this is to continue reading the tag name\n\t// https://www.w3.org/TR/html51/syntax.html#tag-name-state\n\tfunction stateTagName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, name: captureTagName() } );\n\t\t\tstate = State.BeforeAttributeName;\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( char === '/' ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, name: captureTagName() } );\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '>' ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, name: captureTagName() } );\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\n\t\t} else if( !letterRe.test( char ) && !digitRe.test( char ) && char !== ':' ) {\n\t\t\t// Anything else that does not form an html tag. Note: the colon \n\t\t\t// character is accepted for XML namespaced tags\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// continue reading tag name\n\t\t}\n\t}\n\n\t// Called after the '/' is read from a '</' sequence\n\t// https://www.w3.org/TR/html51/syntax.html#end-tag-open-state\n\tfunction stateEndTagOpen( char: string ) {\n\t\tif( char === '>' ) {  // parse error. Encountered \"</>\". Skip it without treating as a tag\n\t\t\tresetToDataState();\n\t\t} else if( letterRe.test( char ) ) {\n\t\t\tstate = State.TagName;\n\t\t} else {\n\t\t\t// some other non-tag-like character, don't treat this as a tag\n\t\t\tresetToDataState();\n\t\t}\n\t}\n\t\n\n\t// https://www.w3.org/TR/html51/syntax.html#before-attribute-name-state\n\tfunction stateBeforeAttributeName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\t// stay in BeforeAttributeName state - continue reading chars\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( char === `=` || quoteRe.test( char ) || controlCharsRe.test( char ) ) {\n\t\t\t// \"Parse error\" characters that, according to the spec, should be\n\t\t\t// appended to the attribute name, but we'll treat these characters\n\t\t\t// as not forming a real HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Any other char, start of a new attribute name\n\t\t\tstate = State.AttributeName;\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-name-state\n\tfunction stateAttributeName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tstate = State.AfterAttributeName;\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '=' ) {\n\t\t\tstate = State.BeforeAttributeValue;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( quoteRe.test( char ) ) {\n\t\t\t// \"Parse error\" characters that, according to the spec, should be\n\t\t\t// appended to the attribute name, but we'll treat these characters\n\t\t\t// as not forming a real HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// anything else: continue reading attribute name\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#after-attribute-name-state\n\tfunction stateAfterAttributeName( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\t// ignore the character - continue reading\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '=' ) {\n\t\t\tstate = State.BeforeAttributeValue;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else if( quoteRe.test( char ) ) {\n\t\t\t// \"Parse error\" characters that, according to the spec, should be\n\t\t\t// appended to the attribute name, but we'll treat these characters\n\t\t\t// as not forming a real HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Any other character, start a new attribute in the current tag\n\t\t\tstate = State.AttributeName;\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#before-attribute-value-state\n\tfunction stateBeforeAttributeValue( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\t// ignore the character - continue reading\n\n\t\t} else if( char === `\"` ) {\n\t\t\tstate = State.AttributeValueDoubleQuoted;\n\n\t\t} else if( char === `'` ) {\n\t\t\tstate = State.AttributeValueSingleQuoted;\n\n\t\t} else if( /[>=`]/.test( char ) ) {\n\t\t\t// Invalid chars after an '=' for an attribute value, don't count \n\t\t\t// the current tag as an HTML tag\n\t\t\tresetToDataState();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// Any other character, consider it an unquoted attribute value\n\t\t\tstate = State.AttributeValueUnquoted;\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-value-double-quoted-state\n\tfunction stateAttributeValueDoubleQuoted( char: string ) {\n\t\tif( char === `\"` ) {  // end the current double-quoted attribute\n\t\t\tstate = State.AfterAttributeValueQuoted;\n\n\t\t} else {\n\t\t\t// consume the character as part of the double-quoted attribute value\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-value-single-quoted-state\n\tfunction stateAttributeValueSingleQuoted( char: string ) {\n\t\tif( char === `'` ) {  // end the current single-quoted attribute\n\t\t\tstate = State.AfterAttributeValueQuoted;\n\n\t\t} else {\n\t\t\t// consume the character as part of the double-quoted attribute value\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#attribute-value-unquoted-state\n\tfunction stateAttributeValueUnquoted( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tstate = State.BeforeAttributeName;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// Any other character, treat it as part of the attribute value\n\t\t}\n\t}\n\n\n\t// https://www.w3.org/TR/html51/syntax.html#after-attribute-value-quoted-state\n\tfunction stateAfterAttributeValueQuoted( char: string ) {\n\t\tif( whitespaceRe.test( char ) ) {\n\t\t\tstate = State.BeforeAttributeName;\n\n\t\t} else if( char === '/' ) {\n\t\t\tstate = State.SelfClosingStartTag;\n\n\t\t} else if( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\t// start of another tag (ignore the previous, incomplete one)\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// Any other character, \"parse error\". Spec says to switch to the\n\t\t\t// BeforeAttributeState and re-consume the character, as it may be\n\t\t\t// the start of a new attribute name\n\t\t\tstate = State.BeforeAttributeName;\n\t\t\treconsumeCurrentCharacter();\n\t\t}\n\t}\n\n\n\t// A '/' has just been read in the current tag (presumably for '/>'), and \n\t// this handles the next character\n\t// https://www.w3.org/TR/html51/syntax.html#self-closing-start-tag-state\n\tfunction stateSelfClosingStartTag( char: string ) {\n\t\tif( char === '>' ) {\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, isClosing: true } );\n\t\t\temitTagAndPreviousTextNode();  // resets to Data state as well\n\t\t\t\n\t\t} else {\n\t\t\tstate = State.BeforeAttributeName;\n\t\t}\n\t}\n\n\t// https://www.w3.org/TR/html51/syntax.html#markup-declaration-open-state\n\t// (HTML Comments or !DOCTYPE)\n\tfunction stateMarkupDeclarationOpen( char: string ) {\n\t\tif( html.substr( charIdx, 2 ) === '--' ) {  // html comment\n\t\t\tcharIdx += 2;  // \"consume\" characters\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, type: 'comment' } );\n\t\t\tstate = State.CommentStart;\n\n\t\t} else if( html.substr( charIdx, 7 ).toUpperCase() === 'DOCTYPE' ) {\n\t\t\tcharIdx += 7;  // \"consume\" characters\n\t\t\tcurrentTag = new CurrentTag( { ...currentTag, type: 'doctype' } );\n\t\t\tstate = State.Doctype;\n\n\t\t} else {\n\t\t\t// At this point, the spec specifies that the state machine should\n\t\t\t// enter the \"bogus comment\" state, in which case any character(s) \n\t\t\t// after the '<!' that were read should become an HTML comment up\n\t\t\t// until the first '>' that is read (or EOF). Instead, we'll assume\n\t\t\t// that a user just typed '<!' as part of text data\n\t\t\tresetToDataState();\n\t\t}\n\t}\n\n\n\t// Handles after the sequence '<!--' has been read\n\t// https://www.w3.org/TR/html51/syntax.html#comment-start-state\n\tfunction stateCommentStart( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\t// We've read the sequence '<!---' at this point (3 dashes)\n\t\t\tstate = State.CommentStartDash;\n\n\t\t} else if( char === '>' ) {\n\t\t\t// At this point, we'll assume the comment wasn't a real comment\n\t\t\t// so we'll just emit it as data. We basically read the sequence \n\t\t\t// '<!-->'\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Any other char, take it as part of the comment\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\n\t// We've read the sequence '<!---' at this point (3 dashes)\n\t// https://www.w3.org/TR/html51/syntax.html#comment-start-dash-state\n\tfunction stateCommentStartDash( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\t// We've read '<!----' (4 dashes) at this point\n\t\t\tstate = State.CommentEnd;\n\t\t\n\t\t} else if( char === '>' ) {\n\t\t\t// At this point, we'll assume the comment wasn't a real comment\n\t\t\t// so we'll just emit it as data. We basically read the sequence \n\t\t\t// '<!--->'\n\t\t\tresetToDataState();\n\n\t\t} else {\n\t\t\t// Anything else, take it as a valid comment\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\t// Currently reading the comment's text (data)\n\t// https://www.w3.org/TR/html51/syntax.html#comment-state\n\tfunction stateComment( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\tstate = State.CommentEndDash;\n\t\t} else {\n\t\t\t// Any other character, stay in the Comment state\n\t\t}\n\t}\n\n\t// When we we've read the first dash inside a comment, it may signal the\n\t// end of the comment if we read another dash\n\t// https://www.w3.org/TR/html51/syntax.html#comment-end-dash-state\n\tfunction stateCommentEndDash( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\tstate = State.CommentEnd;\n\t\t} else {\n\t\t\t// Wasn't a dash, must still be part of the comment\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\n\t// After we've read two dashes inside a comment, it may signal the end of \n\t// the comment if we then read a '>' char\n\t// https://www.w3.org/TR/html51/syntax.html#comment-end-state\n\tfunction stateCommentEnd( char: string ) {\n\t\tif( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '!' ) {\n\t\t\tstate = State.CommentEndBang;\n\n\t\t} else if( char === '-' ) {\n\t\t\t// A 3rd '-' has been read: stay in the CommentEnd state\n\n\t\t} else {\n\t\t\t// Anything else, switch back to the comment state since we didn't\n\t\t\t// read the full \"end comment\" sequence (i.e. '-->')\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\t// We've read the sequence '--!' inside of a comment\n\t// https://www.w3.org/TR/html51/syntax.html#comment-end-bang-state\n\tfunction stateCommentEndBang( char: string ) {\n\t\tif( char === '-' ) {\n\t\t\t// We read the sequence '--!-' inside of a comment. The last dash\n\t\t\t// could signify that the comment is going to close\n\t\t\tstate = State.CommentEndDash;\n\n\t\t} else if( char === '>' ) {\n\t\t\t// End of comment with the sequence '--!>'\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else {\n\t\t\t// The '--!' was not followed by a '>', continue reading the \n\t\t\t// comment's text\n\t\t\tstate = State.Comment;\n\t\t}\n\t}\n\n\n\t/**\n\t * For DOCTYPES in particular, we don't care about the attributes. Just \n\t * advance to the '>' character and emit the tag, unless we find a '<' \n\t * character in which case we'll start a new tag.\n\t * \n\t * Example doctype tag:\n\t *    <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> \n\t * \n\t * Actual spec: https://www.w3.org/TR/html51/syntax.html#doctype-state\n\t */\n\tfunction stateDoctype( char: string ) {\n\t\tif( char === '>' ) {\n\t\t\temitTagAndPreviousTextNode();\n\n\t\t} else if( char === '<' ) {\n\t\t\tstartNewTag();\n\n\t\t} else {\n\t\t\t// stay in the Doctype state\n\t\t}\n\t}\n\n\n\t/**\n\t * Resets the state back to the Data state, and removes the current tag.\n\t * \n\t * We'll generally run this function whenever a \"parse error\" is \n\t * encountered, where the current tag that is being read no longer looks \n\t * like a real HTML tag.\n\t */\n\tfunction resetToDataState() {\n\t\tstate = State.Data;\n\t\tcurrentTag = noCurrentTag;\n\t}\n\n\n\t/**\n\t * Starts a new HTML tag at the current index, ignoring any previous HTML\n\t * tag that was being read.\n\t * \n\t * We'll generally run this function whenever we read a new '<' character,\n\t * including when we read a '<' character inside of an HTML tag that we were\n\t * previously reading.\n\t */\n\tfunction startNewTag() {\n\t\tstate = State.TagOpen;\n\t\tcurrentTag = new CurrentTag( { idx: charIdx } );\n\t}\n\n\t/**\n\t * Once we've decided to emit an open tag, that means we can also emit the\n\t * text node before it.\n\t */\n\tfunction emitTagAndPreviousTextNode() {\n\t\tconst textBeforeTag = html.slice( currentDataIdx, currentTag.idx );\n\t\tif( textBeforeTag ) {\n\t\t\t// the html tag was the first element in the html string, or two \n\t\t\t// tags next to each other, in which case we should not emit a text \n\t\t\t// node\n\t\t\tonText( textBeforeTag, currentDataIdx );\n\t\t}\n\n\t\tif( currentTag.type === 'comment' ) {\n\t\t\tonComment( currentTag.idx );\n\n\t\t} else if( currentTag.type === 'doctype' ) {\n\t\t\tonDoctype( currentTag.idx );\n\n\t\t} else {\n\t\t\tif( currentTag.isOpening ) {\n\t\t\t\tonOpenTag( currentTag.name, currentTag.idx );\n\t\t\t}\n\t\t\tif( currentTag.isClosing ) {  // note: self-closing tags will emit both opening and closing\n\t\t\t\tonCloseTag( currentTag.name, currentTag.idx );\n\t\t\t}\n\t\t}\n\n\t\t// Since we just emitted a tag, reset to the data state for the next char\n\t\tresetToDataState();\n\t\tcurrentDataIdx = charIdx + 1;\n\t}\n\n\n\tfunction emitText() {\n\t\tconst text = html.slice( currentDataIdx, charIdx );\n\t\tonText( text, currentDataIdx );\n\n\t\tcurrentDataIdx = charIdx + 1;\n\t}\n\n\t/**\n\t * Captures the tag name from the start of the tag to the current character \n\t * index, and converts it to lower case\n\t */\n\tfunction captureTagName() {\n\t\tconst startIdx = currentTag.idx + ( currentTag.isClosing ? 2 : 1 );\n\t\treturn html.slice( startIdx, charIdx ).toLowerCase();\n\t}\n\n\n\t/**\n\t * Causes the main loop to re-consume the current character, such as after\n\t * encountering a \"parse error\" that changed state and needs to reconsume\n\t * the same character in that new state.\n\t */\n\tfunction reconsumeCurrentCharacter() {\n\t\tcharIdx--;\n\t}\n}\n\n\nclass CurrentTag {\n\treadonly idx: number;  // the index of the '<' in the html string\n\treadonly type: 'tag' | 'comment' | 'doctype';\n\treadonly name: string;\n\treadonly isOpening: boolean;  // true if it's an opening tag, OR a self-closing open tag\n\treadonly isClosing: boolean;  // true if it's a closing tag, OR a self-closing open tag\n\n\tconstructor( cfg: Partial<CurrentTag> = {} ) {\n\t\tthis.idx = cfg.idx !== undefined ? cfg.idx : -1;\n\t\tthis.type = cfg.type || 'tag';\n\t\tthis.name = cfg.name || '';\n\t\tthis.isOpening = !!cfg.isOpening;\n\t\tthis.isClosing = !!cfg.isClosing;\n\t}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}