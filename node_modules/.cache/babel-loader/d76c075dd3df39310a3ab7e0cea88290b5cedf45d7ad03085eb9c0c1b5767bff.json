{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Match } from \"./match\";\n/**\r\n * @class Autolinker.match.Phone\r\n * @extends Autolinker.match.Match\r\n *\r\n * Represents a Phone number match found in an input string which should be\r\n * Autolinked.\r\n *\r\n * See this class's superclass ({@link Autolinker.match.Match}) for more\r\n * details.\r\n */\nvar PhoneMatch = /** @class */function (_super) {\n  tslib_1.__extends(PhoneMatch, _super);\n  /**\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match\r\n   *   instance, specified in an Object (map).\r\n   */\n  function PhoneMatch(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\r\n     * @protected\r\n     * @property {String} number (required)\r\n     *\r\n     * The phone number that was matched, without any delimiter characters.\r\n     *\r\n     * Note: This is a string to allow for prefixed 0's.\r\n     */\n    _this.number = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @protected\r\n     * @property  {Boolean} plusSign (required)\r\n     *\r\n     * `true` if the matched phone number started with a '+' sign. We'll include\r\n     * it in the `tel:` URL if so, as this is needed for international numbers.\r\n     *\r\n     * Ex: '+1 (123) 456 7879'\r\n     */\n    _this.plusSign = false; // default value just to get the above doc comment in the ES5 output and documentation generator\n    _this.number = cfg.number;\n    _this.plusSign = cfg.plusSign;\n    return _this;\n  }\n  /**\r\n   * Returns a string name for the type of match that this class represents.\r\n   * For the case of PhoneMatch, returns 'phone'.\r\n   *\r\n   * @return {String}\r\n   */\n  PhoneMatch.prototype.getType = function () {\n    return 'phone';\n  };\n  /**\r\n   * Returns the phone number that was matched as a string, without any\r\n   * delimiter characters.\r\n   *\r\n   * Note: This is a string to allow for prefixed 0's.\r\n   *\r\n   * @return {String}\r\n   */\n  PhoneMatch.prototype.getPhoneNumber = function () {\n    return this.number;\n  };\n  /**\r\n   * Alias of {@link #getPhoneNumber}, returns the phone number that was\r\n   * matched as a string, without any delimiter characters.\r\n   *\r\n   * Note: This is a string to allow for prefixed 0's.\r\n   *\r\n   * @return {String}\r\n   */\n  PhoneMatch.prototype.getNumber = function () {\n    return this.getPhoneNumber();\n  };\n  /**\r\n   * Returns the anchor href that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n  PhoneMatch.prototype.getAnchorHref = function () {\n    return 'tel:' + (this.plusSign ? '+' : '') + this.number;\n  };\n  /**\r\n   * Returns the anchor text that should be generated for the match.\r\n   *\r\n   * @return {String}\r\n   */\n  PhoneMatch.prototype.getAnchorText = function () {\n    return this.matchedText;\n  };\n  return PhoneMatch;\n}(Match);\nexport { PhoneMatch };","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,QAAqB,SAAS;AAE5C;;;;;;;;;;AAUA;EAAgCC;EAwB/B;;;;;EAKA,oBAAaC,GAAqB;IAAlC,YACCC,kBAAOD,GAAG,CAAE;IA5Bb;;;;;;;;IAQiBE,YAAM,GAAW,EAAE,CAAC,CAAE;IAEvC;;;;;;;;;IASiBA,cAAQ,GAAY,KAAK,CAAC,CAAE;IAW5CA,KAAI,CAACC,MAAM,GAAGH,GAAG,CAACG,MAAM;IACxBD,KAAI,CAACE,QAAQ,GAAGJ,GAAG,CAACI,QAAQ;;EAC7B;EAGA;;;;;;EAMAC,4BAAO,GAAP;IACC,OAAO,OAAO;EACf,CAAC;EAGD;;;;;;;;EAQAA,mCAAc,GAAd;IACC,OAAO,IAAI,CAACF,MAAM;EACnB,CAAC;EAGD;;;;;;;;EAQAE,8BAAS,GAAT;IACC,OAAO,IAAI,CAACC,cAAc,EAAE;EAC7B,CAAC;EAGD;;;;;EAKAD,kCAAa,GAAb;IACC,OAAO,MAAM,IAAK,IAAI,CAACD,QAAQ,GAAG,GAAG,GAAG,EAAE,CAAE,GAAG,IAAI,CAACD,MAAM;EAC3D,CAAC;EAGD;;;;;EAKAE,kCAAa,GAAb;IACC,OAAO,IAAI,CAACE,WAAW;EACxB,CAAC;EAEF,iBAAC;AAAD,CA7FA,CAAgCT,KAAK","names":["Match","tslib_1","cfg","_super","_this","number","plusSign","PhoneMatch","getPhoneNumber","matchedText"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\match\\phone-match.ts"],"sourcesContent":["import { Match, MatchConfig } from \"./match\";\n\n/**\n * @class Autolinker.match.Phone\n * @extends Autolinker.match.Match\n *\n * Represents a Phone number match found in an input string which should be\n * Autolinked.\n *\n * See this class's superclass ({@link Autolinker.match.Match}) for more\n * details.\n */\nexport class PhoneMatch extends Match {\n\n\t/**\n\t * @protected\n\t * @property {String} number (required)\n\t *\n\t * The phone number that was matched, without any delimiter characters.\n\t *\n\t * Note: This is a string to allow for prefixed 0's.\n\t */\n\tprivate readonly number: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @protected\n\t * @property  {Boolean} plusSign (required)\n\t *\n\t * `true` if the matched phone number started with a '+' sign. We'll include\n\t * it in the `tel:` URL if so, as this is needed for international numbers.\n\t *\n\t * Ex: '+1 (123) 456 7879'\n\t */\n\tprivate readonly plusSign: boolean = false;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: PhoneMatchConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.number = cfg.number;\n\t\tthis.plusSign = cfg.plusSign;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t * For the case of PhoneMatch, returns 'phone'.\n\t *\n\t * @return {String}\n\t */\n\tgetType() {\n\t\treturn 'phone';\n\t}\n\n\n\t/**\n\t * Returns the phone number that was matched as a string, without any \n\t * delimiter characters. \n\t *\n\t * Note: This is a string to allow for prefixed 0's.\n\t *\n\t * @return {String}\n\t */\n\tgetPhoneNumber() {\n\t\treturn this.number;\n\t}\n\n\n\t/**\n\t * Alias of {@link #getPhoneNumber}, returns the phone number that was \n\t * matched as a string, without any delimiter characters.\n\t *\n\t * Note: This is a string to allow for prefixed 0's.\n\t *\n\t * @return {String}\n\t */\n\tgetNumber() {\n\t\treturn this.getPhoneNumber();\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorHref() {\n\t\treturn 'tel:' + ( this.plusSign ? '+' : '' ) + this.number;\n\t}\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @return {String}\n\t */\n\tgetAnchorText() {\n\t\treturn this.matchedText;\n\t}\n\n}\n\n\nexport interface PhoneMatchConfig extends MatchConfig {\n\tnumber: string;\n\tplusSign: boolean;\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}