{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { PhoneMatch } from \"../match/phone-match\";\nimport { nonDigitRe } from '../regex-lib';\n// RegExp objects which are shared by all instances of PhoneMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating PhoneMatcher and its RegExp\n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314).\n// See descriptions of the properties where they are used for details about them\n// Over the years, many people have added to this regex, but it should have been\n// split up by country. Maybe one day we can break this down.\nvar mostPhoneNumbers = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/;\n// Regex for Japanese phone numbers\nvar japanesePhoneRe = /(0([1-9]{1}-?[1-9]\\d{3}|[1-9]{2}-?\\d{3}|[1-9]{2}\\d{1}-?\\d{2}|[1-9]{2}\\d{2}-?\\d{1})-?\\d{4}|0[789]0-?\\d{4}-?\\d{4}|050-?\\d{4}-?\\d{4})/;\n// Combined regex\nvar phoneMatcherRegex = new RegExp(mostPhoneNumbers.source + \"|\" + japanesePhoneRe.source, 'g');\n/**\r\n * @class Autolinker.matcher.Phone\r\n * @extends Autolinker.matcher.Matcher\r\n *\r\n * Matcher to find Phone number matches in an input string.\r\n *\r\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\r\n * details.\r\n */\nvar PhoneMatcher = /** @class */function (_super) {\n  tslib_1.__extends(PhoneMatcher, _super);\n  function PhoneMatcher() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * The regular expression to match Phone numbers. Example matches:\r\n     *\r\n     *     (123) 456-7890\r\n     *     123 456 7890\r\n     *     123-456-7890\r\n     *     +18004441234,,;,10226420346#\r\n     *     +1 (800) 444 1234\r\n     *     10226420346#\r\n     *     1-800-444-1234,1022,64,20346#\r\n     *\r\n     * This regular expression has the following capturing groups:\r\n     *\r\n     * 1 or 2. The prefixed '+' sign, if there is one.\r\n     *\r\n     * @protected\r\n     * @property {RegExp} matcherRegex\r\n     */\n    _this.matcherRegex = phoneMatcherRegex;\n    return _this;\n  }\n  /**\r\n   * @inheritdoc\r\n   */\n  PhoneMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n      tagBuilder = this.tagBuilder,\n      matches = [],\n      match;\n    while ((match = matcherRegex.exec(text)) !== null) {\n      // Remove non-numeric values from phone number string\n      var matchedText = match[0],\n        cleanNumber = matchedText.replace(/[^0-9,;#]/g, ''),\n        // strip out non-digit characters exclude comma semicolon and #\n        plusSign = !!(match[1] || match[2]),\n        // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n        before = match.index == 0 ? '' : text.substr(match.index - 1, 1),\n        after = text.substr(match.index + matchedText.length, 1),\n        contextClear = !before.match(/\\d/) && !after.match(/\\d/);\n      if (this.testMatch(match[3]) && this.testMatch(matchedText) && contextClear) {\n        matches.push(new PhoneMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: match.index,\n          number: cleanNumber,\n          plusSign: plusSign\n        }));\n      }\n    }\n    return matches;\n  };\n  PhoneMatcher.prototype.testMatch = function (text) {\n    return nonDigitRe.test(text);\n  };\n  return PhoneMatcher;\n}(Matcher);\nexport { PhoneMatcher };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAQ,WAAW;AACnC,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,UAAU,QAAQ,cAAc;AAEzC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,IAAMC,gBAAgB,GAAG,sRAAsR;AAE/S;AACA,IAAMC,eAAe,GAAG,oIAAoI;AAE5J;AACA,IAAMC,iBAAiB,GAAG,IAAIC,MAAM,CAAIH,gBAAgB,CAACI,MAAM,SAAIH,eAAe,CAACG,MAAQ,EAAE,GAAG,CAAC;AAGjG;;;;;;;;;AASA;EAAkCC;EAAlC;IAAA;IAEC;;;;;;;;;;;;;;;;;;IAkBUC,kBAAY,GAAGJ,iBAAiB;;EAuC3C;EArCC;;;EAGAK,mCAAY,GAAZ,UAAcC,IAAY;IACzB,IAAIC,YAAY,GAAG,IAAI,CAACA,YAAY;MACnCC,UAAU,GAAG,IAAI,CAACA,UAAU;MAC5BC,OAAO,GAAY,EAAE;MACrBC,KAA6B;IAE9B,OAAO,CAAEA,KAAK,GAAGH,YAAY,CAACI,IAAI,CAAEL,IAAI,CAAE,MAAO,IAAI,EAAG;MACvD;MACA,IAAIM,WAAW,GAAGF,KAAK,CAAE,CAAC,CAAE;QAC3BG,WAAW,GAAGD,WAAW,CAACE,OAAO,CAAE,YAAY,EAAE,EAAE,CAAE;QAAE;QACvDC,QAAQ,GAAG,CAAC,EAAGL,KAAK,CAAE,CAAC,CAAE,IAAIA,KAAK,CAAE,CAAC,CAAE,CAAE;QAAE;QAC3CM,MAAM,GAAGN,KAAK,CAACO,KAAK,IAAI,CAAC,GAAG,EAAE,GAAGX,IAAI,CAACY,MAAM,CAAER,KAAK,CAACO,KAAK,GAAG,CAAC,EAAE,CAAC,CAAE;QAClEE,KAAK,GAAGb,IAAI,CAACY,MAAM,CAAER,KAAK,CAACO,KAAK,GAAGL,WAAW,CAACQ,MAAM,EAAE,CAAC,CAAE;QAC1DC,YAAY,GAAG,CAACL,MAAM,CAACN,KAAK,CAAE,IAAI,CAAE,IAAI,CAACS,KAAK,CAACT,KAAK,CAAE,IAAI,CAAE;MAE7D,IAAI,IAAI,CAACY,SAAS,CAAEZ,KAAK,CAAE,CAAC,CAAE,CAAE,IAAI,IAAI,CAACY,SAAS,CAAEV,WAAW,CAAE,IAAIS,YAAY,EAAG;QACnFZ,OAAO,CAACc,IAAI,CAAE,IAAI3B,UAAU,CAAE;UAC7BY,UAAU,EAAEA,UAAU;UACtBI,WAAW,EAAEA,WAAW;UACxBY,MAAM,EAAEd,KAAK,CAACO,KAAK;UACnBQ,MAAM,EAAEZ,WAAW;UACnBE,QAAQ,EAAEA;SACV,CAAE,CAAE;;;IAIP,OAAON,OAAO;EACf,CAAC;EAGSJ,gCAAS,GAAnB,UAAqBC,IAAY;IAChC,OAAOT,UAAU,CAAC6B,IAAI,CAAEpB,IAAI,CAAE;EAC/B,CAAC;EAEF,mBAAC;AAAD,CA3DA,CAAkCX,OAAO","names":["Matcher","PhoneMatch","nonDigitRe","mostPhoneNumbers","japanesePhoneRe","phoneMatcherRegex","RegExp","source","tslib_1","_this","PhoneMatcher","text","matcherRegex","tagBuilder","matches","match","exec","matchedText","cleanNumber","replace","plusSign","before","index","substr","after","length","contextClear","testMatch","push","offset","number","test"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\matcher\\phone-matcher.ts"],"sourcesContent":["import { Matcher } from \"./matcher\";\nimport { PhoneMatch } from \"../match/phone-match\";\nimport { Match } from \"../match/match\";\nimport { nonDigitRe } from '../regex-lib';\n\n// RegExp objects which are shared by all instances of PhoneMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating PhoneMatcher and its RegExp\n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314).\n// See descriptions of the properties where they are used for details about them\n\n// Over the years, many people have added to this regex, but it should have been\n// split up by country. Maybe one day we can break this down.\nconst mostPhoneNumbers = /(?:(?:(?:(\\+)?\\d{1,3}[-\\040.]?)?\\(?\\d{3}\\)?[-\\040.]?\\d{3}[-\\040.]?\\d{4})|(?:(\\+)(?:9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)[-\\040.]?(?:\\d[-\\040.]?){6,12}\\d+))([,;]+[0-9]+#?)*/;\n\n// Regex for Japanese phone numbers\nconst japanesePhoneRe = /(0([1-9]{1}-?[1-9]\\d{3}|[1-9]{2}-?\\d{3}|[1-9]{2}\\d{1}-?\\d{2}|[1-9]{2}\\d{2}-?\\d{1})-?\\d{4}|0[789]0-?\\d{4}-?\\d{4}|050-?\\d{4}-?\\d{4})/;\n\n// Combined regex\nconst phoneMatcherRegex = new RegExp(`${mostPhoneNumbers.source}|${japanesePhoneRe.source}`, 'g');\n\n\n/**\n * @class Autolinker.matcher.Phone\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find Phone number matches in an input string.\n *\n * See this class's superclass ({@link Autolinker.matcher.Matcher}) for more\n * details.\n */\nexport class PhoneMatcher extends Matcher {\n\n\t/**\n\t * The regular expression to match Phone numbers. Example matches:\n\t *\n\t *     (123) 456-7890\n\t *     123 456 7890\n\t *     123-456-7890\n\t *     +18004441234,,;,10226420346#\n\t *     +1 (800) 444 1234\n\t *     10226420346#\n\t *     1-800-444-1234,1022,64,20346#\n\t *\n\t * This regular expression has the following capturing groups:\n\t *\n\t * 1 or 2. The prefixed '+' sign, if there is one.\n\t *\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t */\n\tprotected matcherRegex = phoneMatcherRegex;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t\ttagBuilder = this.tagBuilder,\n\t\t\tmatches: Match[] = [],\n\t\t\tmatch: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\t// Remove non-numeric values from phone number string\n\t\t\tvar matchedText = match[ 0 ],\n\t\t\t\tcleanNumber = matchedText.replace( /[^0-9,;#]/g, '' ), // strip out non-digit characters exclude comma semicolon and #\n\t\t\t\tplusSign = !!( match[ 1 ] || match[ 2 ] ), // match[ 1 ] or match[ 2 ] is the prefixed plus sign, if there is one\n\t\t\t\tbefore = match.index == 0 ? '' : text.substr( match.index - 1, 1 ),\n\t\t\t\tafter = text.substr( match.index + matchedText.length, 1 ),\n\t\t\t\tcontextClear = !before.match( /\\d/ ) && !after.match( /\\d/ );\n\n\t\t\tif( this.testMatch( match[ 3 ] ) && this.testMatch( matchedText ) && contextClear ) {\n\t\t\t\tmatches.push( new PhoneMatch( {\n\t\t\t\t\ttagBuilder: tagBuilder,\n\t\t\t\t\tmatchedText: matchedText,\n\t\t\t\t\toffset: match.index,\n\t\t\t\t\tnumber: cleanNumber,\n\t\t\t\t\tplusSign: plusSign\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t}\n\n\n\tprotected testMatch( text: string ) {\n\t\treturn nonDigitRe.test( text );\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}