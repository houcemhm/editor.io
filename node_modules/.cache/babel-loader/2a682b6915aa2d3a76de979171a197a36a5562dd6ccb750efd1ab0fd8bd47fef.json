{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { HashtagMatch } from \"../match/hashtag-match\";\n// RegExp objects which are shared by all instances of HashtagMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating HashtagMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nvar matcherRegex = new RegExp(\"#[_\" + alphaNumericAndMarksCharsStr + \"]{1,139}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 139 characters\nvar nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Hashtag\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find HashtagMatch matches in an input string.\n */\nvar HashtagMatcher = /** @class */function (_super) {\n  tslib_1.__extends(HashtagMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n  function HashtagMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {String} serviceName\n     *\n     * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n     * for available values.\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * The regular expression to match Hashtags. Example match:\n     *\n     *     #asdf\n     *\n     * @protected\n     * @property {RegExp} matcherRegex\n     */\n    _this.matcherRegex = matcherRegex;\n    /**\n     * The regular expression to use to check the character before a username match to\n     * make sure we didn't accidentally match an email address.\n     *\n     * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n     *\n     * @protected\n     * @property {RegExp} nonWordCharRegex\n     */\n    _this.nonWordCharRegex = nonWordCharRegex;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n  HashtagMatcher.prototype.parseMatches = function (text) {\n    var matcherRegex = this.matcherRegex,\n      nonWordCharRegex = this.nonWordCharRegex,\n      serviceName = this.serviceName,\n      tagBuilder = this.tagBuilder,\n      matches = [],\n      match;\n    while ((match = matcherRegex.exec(text)) !== null) {\n      var offset = match.index,\n        prevChar = text.charAt(offset - 1);\n      // If we found the match at the beginning of the string, or we found the match\n      // and there is a whitespace char in front of it (meaning it is not a '#' char\n      // in the middle of a word), then it is a hashtag match.\n      if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n        var matchedText = match[0],\n          hashtag = match[0].slice(1); // strip off the '#' character at the beginning\n        matches.push(new HashtagMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: offset,\n          serviceName: serviceName,\n          hashtag: hashtag\n        }));\n      }\n    }\n    return matches;\n  };\n  return HashtagMatcher;\n}(Matcher);\nexport { HashtagMatcher };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAuB,WAAW;AAElD,SAASC,4BAA4B,QAAQ,cAAc;AAC3D,SAASC,YAAY,QAAQ,wBAAwB;AAGrD;AACA;AACA;AACA;AACA;AACA,IAAMC,YAAY,GAAG,IAAIC,MAAM,CAAE,QAAMH,4BAA4B,qBAAgBA,4BAA4B,OAAI,EAAE,GAAG,CAAE,CAAC,CAAE;AAC7H,IAAMI,gBAAgB,GAAG,IAAID,MAAM,CAAE,IAAI,GAAGH,4BAA4B,GAAG,GAAG,CAAE;AAEhF;;;;;;AAMA;EAAoCK;EAgCnC;;;;;EAKA,wBAAaC,GAAyB;IAAtC,YACCC,kBAAOD,GAAG,CAAE;IApCb;;;;;;IAMmBE,iBAAW,GAAoB,SAAS,CAAC,CAAE;IAE9D;;;;;;;;IAQUA,kBAAY,GAAGN,YAAY;IAErC;;;;;;;;;IASUM,sBAAgB,GAAGJ,gBAAgB;IAW5CI,KAAI,CAACC,WAAW,GAAGH,GAAG,CAACG,WAAW;;EACnC;EAGA;;;EAGAC,qCAAY,GAAZ,UAAcC,IAAY;IACzB,IAAIT,YAAY,GAAG,IAAI,CAACA,YAAY;MAChCE,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;MACxCK,WAAW,GAAG,IAAI,CAACA,WAAW;MAC9BG,UAAU,GAAG,IAAI,CAACA,UAAU;MAC5BC,OAAO,GAAY,EAAE;MACrBC,KAA6B;IAEjC,OAAO,CAAEA,KAAK,GAAGZ,YAAY,CAACa,IAAI,CAAEJ,IAAI,CAAE,MAAO,IAAI,EAAG;MACvD,IAAIK,MAAM,GAAGF,KAAK,CAACG,KAAK;QACpBC,QAAQ,GAAGP,IAAI,CAACQ,MAAM,CAAEH,MAAM,GAAG,CAAC,CAAE;MAExC;MACA;MACA;MACA,IAAIA,MAAM,KAAK,CAAC,IAAIZ,gBAAgB,CAACgB,IAAI,CAAEF,QAAQ,CAAE,EAAG;QACvD,IAAIG,WAAW,GAAGP,KAAK,CAAE,CAAC,CAAE;UACxBQ,OAAO,GAAGR,KAAK,CAAE,CAAC,CAAE,CAACS,KAAK,CAAE,CAAC,CAAE,CAAC,CAAE;QAEtCV,OAAO,CAACW,IAAI,CAAE,IAAIvB,YAAY,CAAE;UAC/BW,UAAU,EAAIA,UAAU;UACxBS,WAAW,EAAGA,WAAW;UACzBL,MAAM,EAAQA,MAAM;UACpBP,WAAW,EAAGA,WAAW;UACzBa,OAAO,EAAOA;SACd,CAAE,CAAE;;;IAIP,OAAOT,OAAO;EACf,CAAC;EAEF,qBAAC;AAAD,CA/EA,CAAoCd,OAAO","names":["Matcher","alphaNumericAndMarksCharsStr","HashtagMatch","matcherRegex","RegExp","nonWordCharRegex","tslib_1","cfg","_super","_this","serviceName","HashtagMatcher","text","tagBuilder","matches","match","exec","offset","index","prevChar","charAt","test","matchedText","hashtag","slice","push"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\matcher\\hashtag-matcher.ts"],"sourcesContent":["import { Matcher, MatcherConfig } from \"./matcher\";\nimport { HashtagServices } from \"../autolinker\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { HashtagMatch } from \"../match/hashtag-match\";\nimport { Match } from \"../match/match\";\n\n// RegExp objects which are shared by all instances of HashtagMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating HashtagMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nconst matcherRegex = new RegExp( `#[_${alphaNumericAndMarksCharsStr}]{1,139}(?![_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 139 characters\nconst nonWordCharRegex = new RegExp( '[^' + alphaNumericAndMarksCharsStr + ']' );\n\n/**\n * @class Autolinker.matcher.Hashtag\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find HashtagMatch matches in an input string.\n */\nexport class HashtagMatcher extends Matcher {\n\n\t/**\n\t * @cfg {String} serviceName\n\t *\n\t * The service to point hashtag matches to. See {@link Autolinker#hashtag}\n\t * for available values.\n\t */\n\tprotected readonly serviceName: HashtagServices = 'twitter';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * The regular expression to match Hashtags. Example match:\n\t *\n\t *     #asdf\n\t *\n\t * @protected\n\t * @property {RegExp} matcherRegex\n\t */\n\tprotected matcherRegex = matcherRegex;\n\n\t/**\n\t * The regular expression to use to check the character before a username match to\n\t * make sure we didn't accidentally match an email address.\n\t *\n\t * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n\t *\n\t * @protected\n\t * @property {RegExp} nonWordCharRegex\n\t */\n\tprotected nonWordCharRegex = nonWordCharRegex;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: HashtagMatcherConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.serviceName = cfg.serviceName;\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet matcherRegex = this.matcherRegex,\n\t\t    nonWordCharRegex = this.nonWordCharRegex,\n\t\t    serviceName = this.serviceName,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet offset = match.index,\n\t\t\t    prevChar = text.charAt( offset - 1 );\n\n\t\t\t// If we found the match at the beginning of the string, or we found the match\n\t\t\t// and there is a whitespace char in front of it (meaning it is not a '#' char\n\t\t\t// in the middle of a word), then it is a hashtag match.\n\t\t\tif( offset === 0 || nonWordCharRegex.test( prevChar ) ) {\n\t\t\t\tlet matchedText = match[ 0 ],\n\t\t\t\t    hashtag = match[ 0 ].slice( 1 );  // strip off the '#' character at the beginning\n\n\t\t\t\tmatches.push( new HashtagMatch( {\n\t\t\t\t\ttagBuilder  : tagBuilder,\n\t\t\t\t\tmatchedText : matchedText,\n\t\t\t\t\toffset      : offset,\n\t\t\t\t\tserviceName : serviceName,\n\t\t\t\t\thashtag     : hashtag\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t}\n\n}\n\nexport interface HashtagMatcherConfig extends MatcherConfig {\n\tserviceName: HashtagServices\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}