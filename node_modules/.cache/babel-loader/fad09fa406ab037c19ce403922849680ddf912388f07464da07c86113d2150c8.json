{"ast":null,"code":"/**\r\n * @abstract\r\n * @class Autolinker.match.Match\r\n *\r\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\r\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\r\n *\r\n * For example:\r\n *\r\n *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\r\n *\r\n *     var linkedText = Autolinker.link( input, {\r\n *         replaceFn : function( match ) {\r\n *             console.log( \"href = \", match.getAnchorHref() );\r\n *             console.log( \"text = \", match.getAnchorText() );\r\n *\r\n *             switch( match.getType() ) {\r\n *                 case 'url' :\r\n *                     console.log( \"url: \", match.getUrl() );\r\n *\r\n *                 case 'email' :\r\n *                     console.log( \"email: \", match.getEmail() );\r\n *\r\n *                 case 'mention' :\r\n *                     console.log( \"mention: \", match.getMention() );\r\n *             }\r\n *         }\r\n *     } );\r\n *\r\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\r\n */\nvar Match = /** @class */function () {\n  /**\r\n   * @member Autolinker.match.Match\r\n   * @method constructor\r\n   * @param {Object} cfg The configuration properties for the Match\r\n   *   instance, specified in an Object (map).\r\n   */\n  function Match(cfg) {\n    /**\r\n     * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\r\n     *\r\n     * Reference to the AnchorTagBuilder instance to use to generate an anchor\r\n     * tag for the Match.\r\n     */\n    this.__jsduckDummyDocProp = null; // property used just to get the above doc comment into the ES5 output and documentation generator\n    /**\r\n     * @cfg {String} matchedText (required)\r\n     *\r\n     * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\r\n     */\n    this.matchedText = ''; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\r\n     * @cfg {Number} offset (required)\r\n     *\r\n     * The offset of where the match was made in the input string.\r\n     */\n    this.offset = 0; // default value just to get the above doc comment in the ES5 output and documentation generator\n    this.tagBuilder = cfg.tagBuilder;\n    this.matchedText = cfg.matchedText;\n    this.offset = cfg.offset;\n  }\n  /**\r\n   * Returns the original text that was matched.\r\n   *\r\n   * @return {String}\r\n   */\n  Match.prototype.getMatchedText = function () {\n    return this.matchedText;\n  };\n  /**\r\n   * Sets the {@link #offset} of where the match was made in the input string.\r\n   *\r\n   * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\r\n   * and will therefore set an original offset that is relative to the HTML\r\n   * text node itself. However, we want this offset to be relative to the full\r\n   * HTML input string, and thus if using {@link Autolinker#parse} (rather\r\n   * than calling a {@link Autolinker.matcher.Matcher} directly), then this\r\n   * offset is corrected after the Matcher itself has done its job.\r\n   *\r\n   * @param {Number} offset\r\n   */\n  Match.prototype.setOffset = function (offset) {\n    this.offset = offset;\n  };\n  /**\r\n   * Returns the offset of where the match was made in the input string. This\r\n   * is the 0-based index of the match.\r\n   *\r\n   * @return {Number}\r\n   */\n  Match.prototype.getOffset = function () {\n    return this.offset;\n  };\n  /**\r\n   * Returns the CSS class suffix(es) for this match.\r\n   *\r\n   * A CSS class suffix is appended to the {@link Autolinker#className} in\r\n   * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\r\n   * an anchor tag.\r\n   *\r\n   * For example, if {@link Autolinker#className} was configured as 'myLink',\r\n   * and this method returns `[ 'url' ]`, the final class name of the element\r\n   * will become: 'myLink myLink-url'.\r\n   *\r\n   * The match may provide multiple CSS class suffixes to be appended to the\r\n   * {@link Autolinker#className} in order to facilitate better styling\r\n   * options for different match criteria. See {@link Autolinker.match.Mention}\r\n   * for an example.\r\n   *\r\n   * By default, this method returns a single array with the match's\r\n   * {@link #getType type} name, but may be overridden by subclasses.\r\n   *\r\n   * @return {String[]}\r\n   */\n  Match.prototype.getCssClassSuffixes = function () {\n    return [this.getType()];\n  };\n  /**\r\n   * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\r\n   * Match.\r\n   *\r\n   * This can be used to easily generate anchor tags from matches, and either\r\n   * return their HTML string, or modify them before doing so.\r\n   *\r\n   * Example Usage:\r\n   *\r\n   *     var tag = match.buildTag();\r\n   *     tag.addClass( 'cordova-link' );\r\n   *     tag.setAttr( 'target', '_system' );\r\n   *\r\n   *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\r\n   *\r\n   * Example Usage in {@link Autolinker#replaceFn}:\r\n   *\r\n   *     var html = Autolinker.link( \"Test google.com\", {\r\n   *         replaceFn : function( match ) {\r\n   *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\r\n   *             tag.setAttr( 'rel', 'nofollow' );\r\n   *\r\n   *             return tag;\r\n   *         }\r\n   *     } );\r\n   *\r\n   *     // generated html:\r\n   *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\r\n   */\n  Match.prototype.buildTag = function () {\n    return this.tagBuilder.build(this);\n  };\n  return Match;\n}();\nexport { Match };","map":{"version":3,"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;EA4BC;;;;;;EAMA,eAAaA,GAAgB;IAhC7B;;;;;;IAMQ,yBAAoB,GAAG,IAAI,CAAC,CAAE;IAKtC;;;;;IAKmB,gBAAW,GAAW,EAAE,CAAC,CAAE;IAE9C;;;;;IAKQ,WAAM,GAAW,CAAC,CAAC,CAAE;IAU5B,IAAI,CAACC,UAAU,GAAGD,GAAG,CAACC,UAAU;IAChC,IAAI,CAACC,WAAW,GAAGF,GAAG,CAACE,WAAW;IAClC,IAAI,CAACC,MAAM,GAAGH,GAAG,CAACG,MAAM;EACzB;EAYA;;;;;EAKAC,8BAAc,GAAd;IACC,OAAO,IAAI,CAACF,WAAW;EACxB,CAAC;EAGD;;;;;;;;;;;;EAYAE,yBAAS,GAAT,UAAWD,MAAc;IACxB,IAAI,CAACA,MAAM,GAAGA,MAAM;EACrB,CAAC;EAGD;;;;;;EAMAC,yBAAS,GAAT;IACC,OAAO,IAAI,CAACD,MAAM;EACnB,CAAC;EAqBD;;;;;;;;;;;;;;;;;;;;;EAqBAC,mCAAmB,GAAnB;IACC,OAAO,CAAE,IAAI,CAACC,OAAO,EAAE,CAAE;EAC1B,CAAC;EAGD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BAD,wBAAQ,GAAR;IACC,OAAO,IAAI,CAACH,UAAU,CAACK,KAAK,CAAE,IAAI,CAAE;EACrC,CAAC;EAEF,YAAC;AAAD,CArKA,EAqKC","names":["cfg","tagBuilder","matchedText","offset","Match","getType","build"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\match\\match.ts"],"sourcesContent":["import { AnchorTagBuilder } from \"../anchor-tag-builder\";\n\n/**\n * @abstract\n * @class Autolinker.match.Match\n *\n * Represents a match found in an input string which should be Autolinked. A Match object is what is provided in a\n * {@link Autolinker#replaceFn replaceFn}, and may be used to query for details about the match.\n *\n * For example:\n *\n *     var input = \"...\";  // string with URLs, Email Addresses, and Mentions (Twitter, Instagram, Soundcloud)\n *\n *     var linkedText = Autolinker.link( input, {\n *         replaceFn : function( match ) {\n *             console.log( \"href = \", match.getAnchorHref() );\n *             console.log( \"text = \", match.getAnchorText() );\n *\n *             switch( match.getType() ) {\n *                 case 'url' :\n *                     console.log( \"url: \", match.getUrl() );\n *\n *                 case 'email' :\n *                     console.log( \"email: \", match.getEmail() );\n *\n *                 case 'mention' :\n *                     console.log( \"mention: \", match.getMention() );\n *             }\n *         }\n *     } );\n *\n * See the {@link Autolinker} class for more details on using the {@link Autolinker#replaceFn replaceFn}.\n */\nexport abstract class Match {\n\n\t/**\n\t * @cfg {Autolinker.AnchorTagBuilder} tagBuilder (required)\n\t *\n\t * Reference to the AnchorTagBuilder instance to use to generate an anchor\n\t * tag for the Match.\n\t */\n\tprivate __jsduckDummyDocProp = null;  // property used just to get the above doc comment into the ES5 output and documentation generator\n\n\t// Actual property for the above jsdoc comment\n\tprivate readonly tagBuilder: AnchorTagBuilder;\n\n\t/**\n\t * @cfg {String} matchedText (required)\n\t *\n\t * The original text that was matched by the {@link Autolinker.matcher.Matcher}.\n\t */\n\tprotected readonly matchedText: string = '';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * @cfg {Number} offset (required)\n\t *\n\t * The offset of where the match was made in the input string.\n\t */\n\tprivate offset: number = 0;  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\n\t/**\n\t * @member Autolinker.match.Match\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match\n\t *   instance, specified in an Object (map).\n\t */\n\tconstructor( cfg: MatchConfig ) {\n\t\tthis.tagBuilder = cfg.tagBuilder;\n\t\tthis.matchedText = cfg.matchedText;\n\t\tthis.offset = cfg.offset;\n\t}\n\n\n\t/**\n\t * Returns a string name for the type of match that this class represents.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tabstract getType(): string;\n\n\n\t/**\n\t * Returns the original text that was matched.\n\t *\n\t * @return {String}\n\t */\n\tgetMatchedText() {\n\t\treturn this.matchedText;\n\t}\n\n\n\t/**\n\t * Sets the {@link #offset} of where the match was made in the input string.\n\t *\n\t * A {@link Autolinker.matcher.Matcher} will be fed only HTML text nodes,\n\t * and will therefore set an original offset that is relative to the HTML\n\t * text node itself. However, we want this offset to be relative to the full\n\t * HTML input string, and thus if using {@link Autolinker#parse} (rather\n\t * than calling a {@link Autolinker.matcher.Matcher} directly), then this\n\t * offset is corrected after the Matcher itself has done its job.\n\t *\n\t * @param {Number} offset\n\t */\n\tsetOffset( offset: number ) {\n\t\tthis.offset = offset;\n\t}\n\n\n\t/**\n\t * Returns the offset of where the match was made in the input string. This\n\t * is the 0-based index of the match.\n\t *\n\t * @return {Number}\n\t */\n\tgetOffset() {\n\t\treturn this.offset;\n\t}\n\n\n\t/**\n\t * Returns the anchor href that should be generated for the match.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tabstract getAnchorHref(): string;\n\n\n\t/**\n\t * Returns the anchor text that should be generated for the match.\n\t *\n\t * @abstract\n\t * @return {String}\n\t */\n\tabstract getAnchorText(): string;\n\n\n\t/**\n\t * Returns the CSS class suffix(es) for this match.\n\t *\n\t * A CSS class suffix is appended to the {@link Autolinker#className} in\n\t * the {@link Autolinker.AnchorTagBuilder} when a match is translated into\n\t * an anchor tag.\n\t *\n\t * For example, if {@link Autolinker#className} was configured as 'myLink',\n\t * and this method returns `[ 'url' ]`, the final class name of the element\n\t * will become: 'myLink myLink-url'.\n\t *\n\t * The match may provide multiple CSS class suffixes to be appended to the\n\t * {@link Autolinker#className} in order to facilitate better styling\n\t * options for different match criteria. See {@link Autolinker.match.Mention}\n\t * for an example.\n\t *\n\t * By default, this method returns a single array with the match's\n\t * {@link #getType type} name, but may be overridden by subclasses.\n\t *\n\t * @return {String[]}\n\t */\n\tgetCssClassSuffixes() {\n\t\treturn [ this.getType() ];\n\t}\n\n\n\t/**\n\t * Builds and returns an {@link Autolinker.HtmlTag} instance based on the\n\t * Match.\n\t *\n\t * This can be used to easily generate anchor tags from matches, and either\n\t * return their HTML string, or modify them before doing so.\n\t *\n\t * Example Usage:\n\t *\n\t *     var tag = match.buildTag();\n\t *     tag.addClass( 'cordova-link' );\n\t *     tag.setAttr( 'target', '_system' );\n\t *\n\t *     tag.toAnchorString();  // <a href=\"http://google.com\" class=\"cordova-link\" target=\"_system\">Google</a>\n\t * \n\t * Example Usage in {@link Autolinker#replaceFn}:\n\t *\n\t *     var html = Autolinker.link( \"Test google.com\", {\n\t *         replaceFn : function( match ) {\n\t *             var tag = match.buildTag();  // returns an {@link Autolinker.HtmlTag} instance\n\t *             tag.setAttr( 'rel', 'nofollow' );\n\t *\n\t *             return tag;\n\t *         }\n\t *     } );\n\t *\n\t *     // generated html:\n\t *     //   Test <a href=\"http://google.com\" target=\"_blank\" rel=\"nofollow\">google.com</a>\n\t */\n\tbuildTag() {\n\t\treturn this.tagBuilder.build( this );\n\t}\n\n}\n\nexport interface MatchConfig {\n\ttagBuilder: AnchorTagBuilder;\n\tmatchedText: string;\n\toffset: number;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}