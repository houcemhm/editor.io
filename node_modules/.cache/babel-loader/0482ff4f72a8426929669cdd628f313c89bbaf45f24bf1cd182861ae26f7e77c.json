{"ast":null,"code":"/**\n * Assigns (shallow copies) the properties of `src` onto `dest`, if the\n * corresponding property on `dest` === `undefined`.\n *\n * @param {Object} dest The destination object.\n * @param {Object} src The source object.\n * @return {Object} The destination object (`dest`)\n */\nexport function defaults(dest, src) {\n  for (var prop in src) {\n    if (src.hasOwnProperty(prop) && dest[prop] === undefined) {\n      dest[prop] = src[prop];\n    }\n  }\n  return dest;\n}\n/**\n * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n * `len`, the string will be returned unchanged.\n *\n * @param {String} str The string to truncate and add an ellipsis to.\n * @param {Number} truncateLen The length to truncate the string at.\n * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n *   when truncated. Defaults to '...'\n */\nexport function ellipsis(str, truncateLen, ellipsisChars) {\n  var ellipsisLength;\n  if (str.length > truncateLen) {\n    if (ellipsisChars == null) {\n      ellipsisChars = '&hellip;';\n      ellipsisLength = 3;\n    } else {\n      ellipsisLength = ellipsisChars.length;\n    }\n    str = str.substring(0, truncateLen - ellipsisLength) + ellipsisChars;\n  }\n  return str;\n}\n/**\n * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n *\n * @param {Array} arr The array to find an element of.\n * @param {*} element The element to find in the array, and return the index of.\n * @return {Number} The index of the `element`, or -1 if it was not found.\n */\nexport function indexOf(arr, element) {\n  if (Array.prototype.indexOf) {\n    return arr.indexOf(element);\n  } else {\n    for (var i = 0, len = arr.length; i < len; i++) {\n      if (arr[i] === element) return i;\n    }\n    return -1;\n  }\n}\n/**\n * Removes array elements based on a filtering function. Mutates the input\n * array.\n *\n * Using this instead of the ES5 Array.prototype.filter() function, to allow\n * Autolinker compatibility with IE8, and also to prevent creating many new\n * arrays in memory for filtering.\n *\n * @param {Array} arr The array to remove elements from. This array is\n *   mutated.\n * @param {Function} fn A function which should return `true` to\n *   remove an element.\n * @return {Array} The mutated input `arr`.\n */\nexport function remove(arr, fn) {\n  for (var i = arr.length - 1; i >= 0; i--) {\n    if (fn(arr[i]) === true) {\n      arr.splice(i, 1);\n    }\n  }\n}\n/**\n * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n * with a regular expression that contains capturing parenthesis.\n *\n * For example:\n *\n *     // Modern browsers:\n *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n *\n *     // Old IE (including IE8):\n *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n *\n * This method emulates the functionality of modern browsers for the old IE case.\n *\n * @param {String} str The string to split.\n * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\n *   description of this method.\n *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n *   Note #2: for simplicity's sake, the regular expression does not need\n *   to contain capturing parenthesis - it will be assumed that any match has them.\n * @return {String[]} The split array of strings, with the splitting character(s) included.\n */\nexport function splitAndCapture(str, splitRegex) {\n  if (!splitRegex.global) throw new Error(\"`splitRegex` must have the 'g' flag set\");\n  var result = [],\n    lastIdx = 0,\n    match;\n  while (match = splitRegex.exec(str)) {\n    result.push(str.substring(lastIdx, match.index));\n    result.push(match[0]); // push the splitting char(s)\n    lastIdx = match.index + match[0].length;\n  }\n  result.push(str.substring(lastIdx));\n  return result;\n}\n/**\n * Function that should never be called but is used to check that every\n * enum value is handled using TypeScript's 'never' type.\n */\nexport function throwUnhandledCaseError(theValue) {\n  throw new Error(\"Unhandled case for value: '\" + theValue + \"'\");\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;AAQA,OAAM,SAAUA,QAAQ,CAAEC,IAAS,EAAEC,GAAQ;EAC5C,KAAK,IAAIC,IAAI,IAAID,GAAG,EAAG;IACtB,IAAIA,GAAG,CAACE,cAAc,CAAED,IAAI,CAAE,IAAIF,IAAI,CAAEE,IAAI,CAAE,KAAKE,SAAS,EAAG;MAC9DJ,IAAI,CAAEE,IAAI,CAAE,GAAGD,GAAG,CAAEC,IAAI,CAAE;;;EAI5B,OAAOF,IAAI;AACZ;AAGA;;;;;;;;;;AAUA,OAAM,SAAUK,QAAQ,CAAEC,GAAW,EAAEC,WAAmB,EAAEC,aAAsB;EACjF,IAAIC,cAAsB;EAE1B,IAAIH,GAAG,CAACI,MAAM,GAAGH,WAAW,EAAG;IAC9B,IAAGC,aAAa,IAAI,IAAI,EAAE;MACxBA,aAAa,GAAG,UAAU;MAC1BC,cAAc,GAAG,CAAC;KACnB,MAAM;MACLA,cAAc,GAAGD,aAAa,CAACE,MAAM;;IAGvCJ,GAAG,GAAGA,GAAG,CAACK,SAAS,CAAE,CAAC,EAAEJ,WAAW,GAAGE,cAAc,CAAE,GAAGD,aAAa;;EAEvE,OAAOF,GAAG;AACX;AAGA;;;;;;;AAOA,OAAM,SAAUM,OAAO,CAAKC,GAAQ,EAAEC,OAAU;EAC/C,IAAIC,KAAK,CAACC,SAAS,CAACJ,OAAO,EAAG;IAC7B,OAAOC,GAAG,CAACD,OAAO,CAAEE,OAAO,CAAE;GAE7B,MAAM;IACN,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGL,GAAG,CAACH,MAAM,EAAEO,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAG;MAChD,IAAIJ,GAAG,CAAEI,CAAC,CAAE,KAAKH,OAAO,EAAG,OAAOG,CAAC;;IAEpC,OAAO,CAAC,CAAC;;AAEX;AAGA;;;;;;;;;;;;;;AAcA,OAAM,SAAUE,MAAM,CAAKN,GAAQ,EAAEO,EAA0B;EAC9D,KAAK,IAAIH,CAAC,GAAGJ,GAAG,CAACH,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAG;IAC1C,IAAIG,EAAE,CAAEP,GAAG,CAAEI,CAAC,CAAE,CAAE,KAAK,IAAI,EAAG;MAC7BJ,GAAG,CAACQ,MAAM,CAAEJ,CAAC,EAAE,CAAC,CAAE;;;AAGrB;AAGA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUK,eAAe,CAAEhB,GAAW,EAAEiB,UAAkB;EAC/D,IAAI,CAACA,UAAU,CAACC,MAAM,EAAG,MAAM,IAAIC,KAAK,CAAE,yCAAyC,CAAE;EAErF,IAAIC,MAAM,GAAa,EAAE;IACrBC,OAAO,GAAG,CAAC;IACXC,KAA6B;EAEjC,OAAOA,KAAK,GAAGL,UAAU,CAACM,IAAI,CAAEvB,GAAG,CAAE,EAAG;IACvCoB,MAAM,CAACI,IAAI,CAAExB,GAAG,CAACK,SAAS,CAAEgB,OAAO,EAAEC,KAAK,CAACG,KAAK,CAAE,CAAE;IACpDL,MAAM,CAACI,IAAI,CAAEF,KAAK,CAAE,CAAC,CAAE,CAAE,CAAC,CAAE;IAE5BD,OAAO,GAAGC,KAAK,CAACG,KAAK,GAAGH,KAAK,CAAE,CAAC,CAAE,CAAClB,MAAM;;EAE1CgB,MAAM,CAACI,IAAI,CAAExB,GAAG,CAACK,SAAS,CAAEgB,OAAO,CAAE,CAAE;EAEvC,OAAOD,MAAM;AACd;AAGA;;;;AAIA,OAAM,SAAUM,uBAAuB,CAAEC,QAAe;EACvD,MAAM,IAAIR,KAAK,CAAE,gCAA8BQ,QAAQ,MAAG,CAAE;AAC7D","names":["defaults","dest","src","prop","hasOwnProperty","undefined","ellipsis","str","truncateLen","ellipsisChars","ellipsisLength","length","substring","indexOf","arr","element","Array","prototype","i","len","remove","fn","splice","splitAndCapture","splitRegex","global","Error","result","lastIdx","match","exec","push","index","throwUnhandledCaseError","theValue"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\src\\utils.ts"],"sourcesContent":["/**\n * Assigns (shallow copies) the properties of `src` onto `dest`, if the\n * corresponding property on `dest` === `undefined`.\n *\n * @param {Object} dest The destination object.\n * @param {Object} src The source object.\n * @return {Object} The destination object (`dest`)\n */\nexport function defaults( dest: any, src: any ) {\n\tfor( let prop in src ) {\n\t\tif( src.hasOwnProperty( prop ) && dest[ prop ] === undefined ) {\n\t\t\tdest[ prop ] = src[ prop ];\n\t\t}\n\t}\n\n\treturn dest;\n}\n\n\n/**\n * Truncates the `str` at `len - ellipsisChars.length`, and adds the `ellipsisChars` to the\n * end of the string (by default, two periods: '..'). If the `str` length does not exceed\n * `len`, the string will be returned unchanged.\n *\n * @param {String} str The string to truncate and add an ellipsis to.\n * @param {Number} truncateLen The length to truncate the string at.\n * @param {String} [ellipsisChars=...] The ellipsis character(s) to add to the end of `str`\n *   when truncated. Defaults to '...'\n */\nexport function ellipsis( str: string, truncateLen: number, ellipsisChars?: string ) {\n\tlet ellipsisLength: number;\n\n\tif( str.length > truncateLen ) {\n\t\tif(ellipsisChars == null) {\n\t\t  ellipsisChars = '&hellip;';\n\t\t  ellipsisLength = 3;\n\t\t} else {\n\t\t  ellipsisLength = ellipsisChars.length;\n\t\t}\n\n\t\tstr = str.substring( 0, truncateLen - ellipsisLength ) + ellipsisChars;\n\t}\n\treturn str;\n}\n\n\n/**\n * Supports `Array.prototype.indexOf()` functionality for old IE (IE8 and below).\n *\n * @param {Array} arr The array to find an element of.\n * @param {*} element The element to find in the array, and return the index of.\n * @return {Number} The index of the `element`, or -1 if it was not found.\n */\nexport function indexOf<T>( arr: T[], element: T ) {\n\tif( Array.prototype.indexOf ) {\n\t\treturn arr.indexOf( element );\n\n\t} else {\n\t\tfor( let i = 0, len = arr.length; i < len; i++ ) {\n\t\t\tif( arr[ i ] === element ) return i;\n\t\t}\n\t\treturn -1;\n\t}\n}\n\n\n/**\n * Removes array elements based on a filtering function. Mutates the input\n * array.\n *\n * Using this instead of the ES5 Array.prototype.filter() function, to allow\n * Autolinker compatibility with IE8, and also to prevent creating many new\n * arrays in memory for filtering.\n *\n * @param {Array} arr The array to remove elements from. This array is\n *   mutated.\n * @param {Function} fn A function which should return `true` to\n *   remove an element.\n * @return {Array} The mutated input `arr`.\n */\nexport function remove<T>( arr: T[], fn: ( item: T ) => boolean ) {\n\tfor( let i = arr.length - 1; i >= 0; i-- ) {\n\t\tif( fn( arr[ i ] ) === true ) {\n\t\t\tarr.splice( i, 1 );\n\t\t}\n\t}\n}\n\n\n/**\n * Performs the functionality of what modern browsers do when `String.prototype.split()` is called\n * with a regular expression that contains capturing parenthesis.\n *\n * For example:\n *\n *     // Modern browsers:\n *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', ',', 'b', ',', 'c' ]\n *\n *     // Old IE (including IE8):\n *     \"a,b,c\".split( /(,)/ );  // --> [ 'a', 'b', 'c' ]\n *\n * This method emulates the functionality of modern browsers for the old IE case.\n *\n * @param {String} str The string to split.\n * @param {RegExp} splitRegex The regular expression to split the input `str` on. The splitting\n *   character(s) will be spliced into the array, as in the \"modern browsers\" example in the\n *   description of this method.\n *   Note #1: the supplied regular expression **must** have the 'g' flag specified.\n *   Note #2: for simplicity's sake, the regular expression does not need\n *   to contain capturing parenthesis - it will be assumed that any match has them.\n * @return {String[]} The split array of strings, with the splitting character(s) included.\n */\nexport function splitAndCapture( str: string, splitRegex: RegExp ) {\n\tif( !splitRegex.global ) throw new Error( \"`splitRegex` must have the 'g' flag set\" );\n\n\tlet result: string[] = [],\n\t    lastIdx = 0,\n\t    match: RegExpExecArray | null;\n\n\twhile( match = splitRegex.exec( str ) ) {\n\t\tresult.push( str.substring( lastIdx, match.index ) );\n\t\tresult.push( match[ 0 ] );  // push the splitting char(s)\n\n\t\tlastIdx = match.index + match[ 0 ].length;\n\t}\n\tresult.push( str.substring( lastIdx ) );\n\n\treturn result;\n}\n\n\n/**\n * Function that should never be called but is used to check that every\n * enum value is handled using TypeScript's 'never' type.\n */\nexport function throwUnhandledCaseError( theValue: never ) {\n\tthrow new Error( `Unhandled case for value: '${theValue}'` );\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}