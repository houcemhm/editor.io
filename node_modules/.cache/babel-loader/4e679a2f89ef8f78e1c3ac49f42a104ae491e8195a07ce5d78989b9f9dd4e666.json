{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Matcher } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { MentionMatch } from \"../match/mention-match\";\n// RegExp objects which are shared by all instances of MentionMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating MentionMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nvar twitterRegex = new RegExp(\"@[_\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 50 characters\nvar instagramRegex = new RegExp(\"@[_.\" + alphaNumericAndMarksCharsStr + \"]{1,30}(?![_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 30 characters\nvar soundcloudRegex = new RegExp(\"@[-_.\" + alphaNumericAndMarksCharsStr + \"]{1,50}(?![-_\" + alphaNumericAndMarksCharsStr + \"])\", 'g'); // lookahead used to make sure we don't match something above 50 characters\nvar nonWordCharRegex = new RegExp('[^' + alphaNumericAndMarksCharsStr + ']');\n/**\n * @class Autolinker.matcher.Mention\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find/replace username matches in an input string.\n */\nvar MentionMatcher = /** @class */function (_super) {\n  tslib_1.__extends(MentionMatcher, _super);\n  /**\n   * @method constructor\n   * @param {Object} cfg The configuration properties for the Match instance,\n   *   specified in an Object (map).\n   */\n  function MentionMatcher(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n     *\n     * The name of service to link @mentions to.\n     *\n     * Valid values are: 'twitter', 'instagram', or 'soundcloud'\n     */\n    _this.serviceName = 'twitter'; // default value just to get the above doc comment in the ES5 output and documentation generator\n    /**\n     * Hash of regular expression to match username handles. Example match:\n     *\n     *     @asdf\n     *\n     * @private\n     * @property {Object} matcherRegexes\n     */\n    _this.matcherRegexes = {\n      'twitter': twitterRegex,\n      'instagram': instagramRegex,\n      'soundcloud': soundcloudRegex\n    };\n    /**\n     * The regular expression to use to check the character before a username match to\n     * make sure we didn't accidentally match an email address.\n     *\n     * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n     *\n     * @private\n     * @property {RegExp} nonWordCharRegex\n     */\n    _this.nonWordCharRegex = nonWordCharRegex;\n    _this.serviceName = cfg.serviceName;\n    return _this;\n  }\n  /**\n   * @inheritdoc\n   */\n  MentionMatcher.prototype.parseMatches = function (text) {\n    var serviceName = this.serviceName,\n      matcherRegex = this.matcherRegexes[this.serviceName],\n      nonWordCharRegex = this.nonWordCharRegex,\n      tagBuilder = this.tagBuilder,\n      matches = [],\n      match;\n    if (!matcherRegex) {\n      return matches;\n    }\n    while ((match = matcherRegex.exec(text)) !== null) {\n      var offset = match.index,\n        prevChar = text.charAt(offset - 1);\n      // If we found the match at the beginning of the string, or we found the match\n      // and there is a whitespace char in front of it (meaning it is not an email\n      // address), then it is a username match.\n      if (offset === 0 || nonWordCharRegex.test(prevChar)) {\n        var matchedText = match[0].replace(/\\.+$/g, ''),\n          // strip off trailing .\n          mention = matchedText.slice(1); // strip off the '@' character at the beginning\n        matches.push(new MentionMatch({\n          tagBuilder: tagBuilder,\n          matchedText: matchedText,\n          offset: offset,\n          serviceName: serviceName,\n          mention: mention\n        }));\n      }\n    }\n    return matches;\n  };\n  return MentionMatcher;\n}(Matcher);\nexport { MentionMatcher };","map":{"version":3,"mappings":";AAAA,SAASA,OAAO,QAAuB,WAAW;AAClD,SAASC,4BAA4B,QAAQ,cAAc;AAE3D,SAASC,YAAY,QAAQ,wBAAwB;AAGrD;AACA;AACA;AACA;AACA;AACA,IAAMC,YAAY,GAAG,IAAIC,MAAM,CAAE,QAAMH,4BAA4B,oBAAeA,4BAA4B,OAAI,EAAE,GAAG,CAAE,CAAC,CAAE;AAC5H,IAAMI,cAAc,GAAG,IAAID,MAAM,CAAE,SAAOH,4BAA4B,oBAAeA,4BAA4B,OAAI,EAAE,GAAG,CAAE,CAAC,CAAE;AAC/H,IAAMK,eAAe,GAAG,IAAIF,MAAM,CAAE,UAAQH,4BAA4B,qBAAgBA,4BAA4B,OAAI,EAAE,GAAG,CAAE,CAAC,CAAE;AAClI,IAAMM,gBAAgB,GAAG,IAAIH,MAAM,CAAE,IAAI,GAAGH,4BAA4B,GAAG,GAAG,CAAE;AAEhF;;;;;;AAMA;EAAoCO;EAqCnC;;;;;EAKA,wBAAaC,GAAyB;IAAtC,YACCC,kBAAOD,GAAG,CAAE;IAzCb;;;;;;;IAOUE,iBAAW,GAAoB,SAAS,CAAC,CAAE;IAErD;;;;;;;;IAQmBA,oBAAc,GAA4B;MAC5D,SAAS,EAAER,YAAY;MACvB,WAAW,EAAEE,cAAc;MAC3B,YAAY,EAAEC;KACd;IAED;;;;;;;;;IASmBK,sBAAgB,GAAGJ,gBAAgB;IAWrDI,KAAI,CAACC,WAAW,GAAGH,GAAG,CAACG,WAAW;;EACnC;EAGA;;;EAGAC,qCAAY,GAAZ,UAAcC,IAAY;IACzB,IAAIF,WAAW,GAAG,IAAI,CAACA,WAAW;MAC9BG,YAAY,GAAG,IAAI,CAACC,cAAc,CAAE,IAAI,CAACJ,WAAW,CAAE;MACtDL,gBAAgB,GAAG,IAAI,CAACA,gBAAgB;MACxCU,UAAU,GAAG,IAAI,CAACA,UAAU;MAC5BC,OAAO,GAAY,EAAE;MACrBC,KAA6B;IAEjC,IAAI,CAACJ,YAAY,EAAE;MAClB,OAAOG,OAAO;;IAGf,OAAO,CAAEC,KAAK,GAAGJ,YAAY,CAACK,IAAI,CAAEN,IAAI,CAAE,MAAO,IAAI,EAAG;MACvD,IAAIO,MAAM,GAAGF,KAAK,CAACG,KAAK;QACpBC,QAAQ,GAAGT,IAAI,CAACU,MAAM,CAAEH,MAAM,GAAG,CAAC,CAAE;MAExC;MACA;MACA;MACA,IAAIA,MAAM,KAAK,CAAC,IAAId,gBAAgB,CAACkB,IAAI,CAAEF,QAAQ,CAAE,EAAG;QACvD,IAAIG,WAAW,GAAGP,KAAK,CAAE,CAAC,CAAE,CAACQ,OAAO,CAAE,OAAO,EAAE,EAAE,CAAE;UAAE;UACjDC,OAAO,GAAGF,WAAW,CAACG,KAAK,CAAE,CAAC,CAAE,CAAC,CAAE;QAEvCX,OAAO,CAACY,IAAI,CAAE,IAAI5B,YAAY,CAAE;UAC/Be,UAAU,EAAMA,UAAU;UAC1BS,WAAW,EAAKA,WAAW;UAC3BL,MAAM,EAAUA,MAAM;UACtBT,WAAW,EAAKA,WAAW;UAC3BgB,OAAO,EAASA;SAChB,CAAE,CAAE;;;IAIP,OAAOV,OAAO;EACf,CAAC;EAEF,qBAAC;AAAD,CAxFA,CAAoClB,OAAO","names":["Matcher","alphaNumericAndMarksCharsStr","MentionMatch","twitterRegex","RegExp","instagramRegex","soundcloudRegex","nonWordCharRegex","tslib_1","cfg","_super","_this","serviceName","MentionMatcher","text","matcherRegex","matcherRegexes","tagBuilder","matches","match","exec","offset","index","prevChar","charAt","test","matchedText","replace","mention","slice","push"],"sources":["D:\\github\\editor.io\\node_modules\\autolinker\\dist\\es2015\\src\\matcher\\mention-matcher.ts"],"sourcesContent":["import { Matcher, MatcherConfig } from \"./matcher\";\nimport { alphaNumericAndMarksCharsStr } from \"../regex-lib\";\nimport { MentionServices } from \"../autolinker\";\nimport { MentionMatch } from \"../match/mention-match\";\nimport { Match } from \"../match/match\";\n\n// RegExp objects which are shared by all instances of MentionMatcher. These are\n// here to avoid re-instantiating the RegExp objects if `Autolinker.link()` is\n// called multiple times, thus instantiating MentionMatcher and its RegExp \n// objects each time (which is very expensive - see https://github.com/gregjacobs/Autolinker.js/issues/314). \n// See descriptions of the properties where they are used for details about them\nconst twitterRegex = new RegExp( `@[_${alphaNumericAndMarksCharsStr}]{1,50}(?![_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 50 characters\nconst instagramRegex = new RegExp( `@[_.${alphaNumericAndMarksCharsStr}]{1,30}(?![_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 30 characters\nconst soundcloudRegex = new RegExp( `@[-_.${alphaNumericAndMarksCharsStr}]{1,50}(?![-_${alphaNumericAndMarksCharsStr}])`, 'g' );  // lookahead used to make sure we don't match something above 50 characters\nconst nonWordCharRegex = new RegExp( '[^' + alphaNumericAndMarksCharsStr + ']' );\n\n/**\n * @class Autolinker.matcher.Mention\n * @extends Autolinker.matcher.Matcher\n *\n * Matcher to find/replace username matches in an input string.\n */\nexport class MentionMatcher extends Matcher {\n\n\t/**\n\t * @cfg {'twitter'/'instagram'/'soundcloud'} protected\n\t * \n\t * The name of service to link @mentions to.\n\t * \n\t * Valid values are: 'twitter', 'instagram', or 'soundcloud'\n\t */\n\tprotected serviceName: MentionServices = 'twitter';  // default value just to get the above doc comment in the ES5 output and documentation generator\n\n\t/**\n\t * Hash of regular expression to match username handles. Example match:\n\t *\n\t *     @asdf\n\t *\n\t * @private\n\t * @property {Object} matcherRegexes\n\t */\n\tprotected readonly matcherRegexes: {[key: string]: RegExp} = {\n\t\t'twitter': twitterRegex,\n\t\t'instagram': instagramRegex,\n\t\t'soundcloud': soundcloudRegex\n\t};\n\n\t/**\n\t * The regular expression to use to check the character before a username match to\n\t * make sure we didn't accidentally match an email address.\n\t *\n\t * For example, the string \"asdf@asdf.com\" should not match \"@asdf\" as a username.\n\t *\n\t * @private\n\t * @property {RegExp} nonWordCharRegex\n\t */\n\tprotected readonly nonWordCharRegex = nonWordCharRegex;\n\n\n\t/**\n\t * @method constructor\n\t * @param {Object} cfg The configuration properties for the Match instance,\n\t *   specified in an Object (map).\n\t */\n\tconstructor( cfg: MentionMatcherConfig ) {\n\t\tsuper( cfg );\n\n\t\tthis.serviceName = cfg.serviceName;\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tparseMatches( text: string ) {\n\t\tlet serviceName = this.serviceName,\n\t\t    matcherRegex = this.matcherRegexes[ this.serviceName ],\n\t\t    nonWordCharRegex = this.nonWordCharRegex,\n\t\t    tagBuilder = this.tagBuilder,\n\t\t    matches: Match[] = [],\n\t\t    match: RegExpExecArray | null;\n\n\t\tif (!matcherRegex) {\n\t\t\treturn matches;\n\t\t}\n\n\t\twhile( ( match = matcherRegex.exec( text ) ) !== null ) {\n\t\t\tlet offset = match.index,\n\t\t\t    prevChar = text.charAt( offset - 1 );\n\n\t\t\t// If we found the match at the beginning of the string, or we found the match\n\t\t\t// and there is a whitespace char in front of it (meaning it is not an email\n\t\t\t// address), then it is a username match.\n\t\t\tif( offset === 0 || nonWordCharRegex.test( prevChar ) ) {\n\t\t\t\tlet matchedText = match[ 0 ].replace( /\\.+$/g, '' ), // strip off trailing .\n\t\t\t\t    mention = matchedText.slice( 1 );  // strip off the '@' character at the beginning\n\n\t\t\t\tmatches.push( new MentionMatch( {\n\t\t\t\t\ttagBuilder    : tagBuilder,\n\t\t\t\t\tmatchedText   : matchedText,\n\t\t\t\t\toffset        : offset,\n\t\t\t\t\tserviceName   : serviceName,\n\t\t\t\t\tmention       : mention\n\t\t\t\t} ) );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t}\n\n}\n\n\nexport interface MentionMatcherConfig extends MatcherConfig {\n\tserviceName: MentionServices\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}